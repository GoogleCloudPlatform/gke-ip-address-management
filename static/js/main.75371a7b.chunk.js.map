{"version":3,"sources":["components/TextDropdown.js","components/NetmaskDropdown.js","components/NetmaskInput.js","components/TextDropdownInput.js","rules/input/BaseNetmaskRules.js","rules/input/cluster/ClusterRules.js","rules/input/node/NodeRules.js","rules/input/service/ServiceRules.js","rules/input/AvailableNetmaskRules.js","rules/input/PodNetmaskRules.js","rules/input/InputRules.js","ui/input/Parameters.js","logic/IPUtils.js","logic/Packer.js","logic/Logic.js","ui/output/LogicOutputDropdown.js","ui/output/LogicOutputNetworkRow.js","ui/output/LogicOutputFreeNetworkRow.js","rules/output/NodeOutputRules.js","rules/output/ServiceOutpuRules.js","rules/output/PodOutputRules.js","ui/output/LogicOutput.js","ui/output/Results.js","components/StateButtons.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["TextDropdown","Component","constructor","props","super","createOptions","options","this","forEach","s","push","value","key","text","handleChange","bind","e","changeHandler","target","render","type","name","id","onChange","NetmaskDropdown","min","rules","minimum","max","maximum","i","Number","NetmaskInput","propName","row","for","sm","label","TextDropdownInput","reducerMax","accumulator","currentValue","reducerMin","BaseNetmaskRules","minRules","maxRules","reduce","HardcodedMin","ref","NetmaskMax","state","netmask","ClusterRules","NodeRules","ServiceRules","HardcodedMax","AvailableNetmaskRules","PodNetmastRules","InputRules","input","clusterRules","nodeRules","serviceRules","availableNetmaskRules","podRules","getClusterRules","getNodeRules","getServiceRules","getAvailableNetmaskRules","getPodRules","locationTypeOptions","extraZoneOptions","masterBlockOptions","nodePodNetmaskOptions","Parameters","handleChangeNetwork","handleLocationTypeChange","handleExtraZonesChange","handlePropChange","newValue","handleUpdateInput","Object","assign","locationType","extraZones","network","extraZonesLabel","extraZonesInput","placeholder","inputRules","nodeNetmask","clusterNetmask","nodePodNetmask","serviceNetmask","masterNetwork","IPUtils","address","octets","match","total","prototype","hasOwnProperty","call","mul","networkIp","netmaskDec","fixSigned","currentIp","endIp","remaining","currentBits","NaN","v2","signed","ret","Packer","pack","space","subnets","sortedSubnets","sortSubnets","netStart","dotToDec","net","mask","netEnd","packedNets","length","subnet","fit","end","description","vpcName","subnetRangeName","freeRanges","findEmptyRanges","spaceStart","spaceEnd","currentNet","currentNetEnd","sort","a","b","firstFreeIpDec","startIp","maxIp","freeNets","unshift","Logic","packer","validCombinations","ok","count","networks","targetNumberLength","toString","j","pad","packerResults","combinations","targetLength","numberToPad","padStart","getCombinations","LogicOutputDropdown","logic","element","index","LogicOutputNetworkRow","subnetTypeText","decToDot","LogicOutputFreeNetworkRow","NodeNetworkRules","netmaskToUsableIps","ClusterNetworkRules","RegionalLocationRules","currentMax","parseInt","NodeOutputRules","nodeNetworkRules","clusterNetworkRules","v1","details","ServiceOutputRules","PodOutputRules","LogicOutput","createDetail","nodeOutputRules","detail","createRows","output","combinationIndex","rows","createFreeRows","freeRange","createTables","handleUpdateOutput","handleChangeCombination","setState","serviceOutputRules","podOutputRules","Results","printReslts","StateButtons","React","downloadModal","uploadModal","configText","toggleDownload","toggleUpload","uploadConfig","handleConfigText","prevState","handleUploadConfig","className","color","onClick","isOpen","toggle","Calculator","newInput","JSON","parse","validateInput","isInteger","stringify","App","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75371a7b.chunk.js","sourcesContent":["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {Input} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to display an Input element for a text dropdown\n */\nclass TextDropdown extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  /**\n   * Handle selecting a different item.\n   *\n   * @param {Object} e the selection event.\n   */\n  handleChange(e) {\n    this.props.changeHandler(e.target.value);\n  }\n\n  /**\n   *\n   * Create the options.\n   *\n   * @return {Object} the options for the dropdown.\n   */\n  createOptions = () => {\n    const options = [];\n    this.props.options.forEach((s) => {\n      options.push(<option value={s.value} key={s.value}>{s.text}</option>);\n    });\n    return options;\n  };\n\n  /**\n   * Render the Input element.\n   *\n   * @return {Object} the Input element for a text dropdown.\n   */\n  render() {\n    if (this.props.value === '' || this.props.value === null) {\n      return (\n        <Input\n          type=\"select\"\n          name={this.props.name}\n          id={this.props.id}\n          onChange={this.handleChange}\n        >\n          {this.createOptions()}\n        </Input>\n      );\n    } else {\n      return (\n        <Input\n          type=\"select\"\n          name={this.props.name}\n          id={this.props.id}\n          onChange={this.handleChange}\n          value={this.props.value}\n        >\n          {this.createOptions()}\n        </Input>\n      );\n    }\n  }\n}\n\n\nTextDropdown.propTypes = {\n  id: PropTypes.string,\n  options: PropTypes.array,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  changeHandler: PropTypes.func,\n};\n\nexport default TextDropdown;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {Input} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to display an Input element for a dropdown to select netmask values.\n */\nclass NetmaskDropdown extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handle selecting a different value.\n   *\n   * @param {Object} e the selection event.\n   */\n  handleChange(e) {\n    this.props.changeHandler(Number(e.target.value));\n  }\n\n  /**\n   *\n   * Create the options.\n   *\n   * @return {Object} the options for the dropdown.\n   */\n  createOptions = () => {\n    const min = this.props.rules.minimum().minimum();\n    const max = this.props.rules.maximum().maximum();\n    const options = [];\n\n    for (let i = min; i >= max; i--) {\n      options.push(<option value={i} key={i}>/{i}</option>);\n    }\n    return options;\n  };\n\n  /**\n   * Render the Input element.\n   *\n   * @return {Object} the Input element for the netmask dropdown.\n   */\n  render() {\n    if (this.props.value === '' || this.props.value === null) {\n      return (\n        <Input\n          type=\"select\"\n          name=\"select\"\n          id=\"exampleSelect\"\n          onChange={this.handleChange}\n        >\n          {this.createOptions()}\n        </Input>\n      );\n    } else {\n      return (\n        <Input\n          type=\"select\"\n          name=\"select\"\n          id=\"exampleSelect\"\n          onChange={this.handleChange}\n          value={this.props.value}\n        >\n          {this.createOptions()}\n        </Input>\n      );\n    }\n  }\n}\n\nNetmaskDropdown.propTypes = {\n  rules: PropTypes.object,\n  value: PropTypes.number,\n  changeHandler: PropTypes.func,\n};\n\nexport default NetmaskDropdown;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {FormGroup, Label, Col} from 'reactstrap';\nimport NetmaskDropdown from './NetmaskDropdown';\nimport PropTypes from 'prop-types';\n\n\n/**\n * Component to display an FormGroup element that contains a dropdown to select netmask values.\n */\nclass NetmaskInput extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handle selecting a different value.\n   *\n   * @param {Object} value the selected value.\n   */\n  handleChange(value) {\n    this.props.changeHandler(this.props.propName, value);\n  }\n\n  /**\n   * Render the FormGroup element.\n   *\n   * @return {Object} the FormGroup element that contains the netmask dropdown.\n   */\n  render() {\n    return (\n      <FormGroup row>\n        <Label for=\"{this.props.name}\" sm={3}>\n          {this.props.label}\n        </Label>\n        <Col sm={2}>\n          <NetmaskDropdown\n            name={this.props.name}\n            rules={this.props.rules}\n            changeHandler={this.handleChange}\n            value={this.props.value}\n          />\n        </Col>\n      </FormGroup>\n    );\n  }\n}\n\nNetmaskInput.propTypes = {\n  rules: PropTypes.object,\n  value: PropTypes.number,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  propName: PropTypes.string,\n  changeHandler: PropTypes.func,\n};\n\nexport default NetmaskInput;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {FormGroup, Label, Col} from 'reactstrap';\nimport TextDropdown from './TextDropdown';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to display a Form element for a text dropdown\n */\nclass TextDropdownInput extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handle selecting a different value.\n   *\n   * @param {Object} value the selection value.\n   */\n  handleChange(value) {\n    this.props.changeHandler(this.props.propName, value);\n  }\n\n  /**\n   * Render the From element.\n   *\n   * @return {Object} the From element for a text dropdown.\n   */\n  render() {\n    return (\n      <FormGroup row>\n        <Label for=\"{this.props.name}\" sm={3}>\n          {this.props.label}\n        </Label>\n        <Col sm={2}>\n          <TextDropdown\n            name={this.props.name}\n            id={this.props.name}\n            options={this.props.options}\n            value={this.props.value}\n            changeHandler={this.handleChange}\n          />\n        </Col>\n      </FormGroup>\n    );\n  }\n}\n\nTextDropdownInput.propTypes = {\n  propName: PropTypes.string,\n  label: PropTypes.string,\n  options: PropTypes.array,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  changeHandler: PropTypes.func,\n};\n\n\nexport default TextDropdownInput;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst reducerMax = (accumulator, currentValue) =>\n  accumulator == null || currentValue.maximum() > accumulator.maximum()\n    ? currentValue\n    : accumulator;\n\nconst reducerMin = (accumulator, currentValue) =>\n  accumulator == null || currentValue.maximum() < accumulator.maximum()\n    ? currentValue\n    : accumulator;\n\n/**\n * Base class for the rules that define the maximum and minimum netmasks to show\n */\nclass BaseNetmaskRules {\n  /**\n   *\n   * Constructor.\n   *\n   * @param {Object} minRules\n   * @param {Object} maxRules\n   */\n  constructor(minRules, maxRules) {\n    this.minRules = minRules;\n    this.maxRules = maxRules;\n  }\n\n  /**\n   * Calculate the minimum netmask possible.\n   *\n   * @return {number} minimum netmask possible.\n   */\n  minimum() {\n    return this.minRules.reduce(reducerMin);\n  }\n\n  /**\n   * Calculate the max netmask possible.\n   *\n   * @return {number} max netmask possible.\n   */\n  maximum() {\n    return this.maxRules.reduce(reducerMax);\n  }\n}\n\nexport default BaseNetmaskRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from '../BaseNetmaskRules';\n\n/**\n * Hardcoded minimum limit for cluster ranges\n */\nclass HardcodedMin {\n  /**\n   * Return the minimum for the range\n   *\n   * @return {number} range minimum\n   */\n  minimum() {\n    return 24;\n  }\n\n\n  /**\n   * Returns the reference documentation URL.\n   *\n   * @return {string} reference URL.\n   */\n  ref() {\n    return 'https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips#defaults_limits';\n  }\n}\n\n\n/**\n * Maximum limit for cluster ranges, based on available netmask\n */\nclass NetmaskMax {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    this.state = state;\n  }\n\n  /**\n   * Return the max for the range\n   *\n   * @return {number} range max\n   */\n  maximum() {\n    return this.state.netmask;\n  }\n}\n\n/**\n * Rules for available range of cluster netmask options.\n */\nclass ClusterRules extends BaseNetmaskRules {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    super([new HardcodedMin()], [new NetmaskMax(state)]);\n  }\n}\n\nexport default ClusterRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from '../BaseNetmaskRules';\n\n/**\n * Hardcoded minimum limit for node ranges\n */\nclass HardcodedMin {\n  /**\n   * Return the minimum for the range\n   *\n   * @return {number} range minimum\n   */\n  minimum() {\n    return 29;\n  }\n\n  /**\n   * Returns the reference documentation URL.\n   *\n   * @return {string} reference URL.\n   */\n  ref() {\n    return 'https://cloud.google.com/vpc/docs/vpc#manually_created_subnet_ip_ranges';\n  }\n}\n\n/**\n * Maximum limit for node ranges, based on available netmask\n */\nclass NetmaskMax {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    this.state = state;\n  }\n\n  /**\n   * Return the max for the range\n   *\n   * @return {number} range max\n   */\n  maximum() {\n    return this.state.netmask;\n  }\n}\n\n/**\n * Rules for available range of node netmask options.\n */\nclass NodeRules extends BaseNetmaskRules {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    super([new HardcodedMin()], [new NetmaskMax(state)]);\n  }\n}\n\nexport default NodeRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from '../BaseNetmaskRules';\n\n/**\n * Hardcoded minimum limit for service ranges\n */\nclass HardcodedMin {\n  /**\n   * Return the minimum for the range\n   *\n   * @return {number} range minimum\n   */\n  minimum() {\n    return 27;\n  }\n\n\n  /**\n   * Returns the reference documentation URL.\n   *\n   * @return {string} reference URL.\n   */\n  ref() {\n    return 'https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips#defaults_limits';\n  }\n}\n\n\n/**\n * Maximum limit for service ranges, based on available netmask\n */\nclass NetmaskMax {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    this.state = state;\n  }\n\n  /**\n   * Return the max for the range\n   *\n   * @return {number} range max\n   */\n  maximum() {\n    return this.state.netmask;\n  }\n}\n\n\n/**\n * Rules for available range of service netmask options.\n */\nclass ServiceRules extends BaseNetmaskRules {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    super([new HardcodedMin()], [new NetmaskMax(state)]);\n  }\n}\n\nexport default ServiceRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from './BaseNetmaskRules';\n\n/**\n * Rule that define the minimum available netmask\n */\nclass HardcodedMin {\n  /**\n   * Calculate the minimum netmask possible.\n   *\n   * @return {number} minimum netmask possible.\n   */\n  minimum() {\n    return 29;\n  }\n}\n\n/**\n * Rule that define the maximum available netmask\n */\nclass HardcodedMax {\n  /**\n   * Calculate the maximum netmask possible.\n   *\n   * @return {number} maximum netmask possible.\n   */\n  maximum() {\n    return 8;\n  }\n}\n\n/**\n * Rules that define the available netmasks to show\n */\nclass AvailableNetmaskRules extends BaseNetmaskRules {\n  /**\n   *\n   * Constructor.\n   */\n  constructor() {\n    super([new HardcodedMin()], [new HardcodedMax()]);\n  }\n}\n\nexport default AvailableNetmaskRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from './BaseNetmaskRules';\n\n/**\n * Hardcoded minimum limit for pod ranges\n */\nclass HardcodedMin {\n  /**\n   * Return the minimum for the range\n   *\n   * @return {number} range minimum\n   */\n  minimum() {\n    return 28;\n  }\n}\n\n/**\n * Hardcoded max limit for pod ranges\n */\nclass HardcodedMax {\n  /**\n   * Return the max for the range\n   *\n   * @return {number} range max\n   */\n  maximum() {\n    return 24;\n  }\n}\n\n\n/**\n * Rules for available range of pod netmask options.\n */\nclass PodNetmastRules extends BaseNetmaskRules {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    super([new HardcodedMin()], [new HardcodedMax()]);\n  }\n}\n\nexport default PodNetmastRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport ClusterRules from './cluster/ClusterRules';\nimport NodeRules from './node/NodeRules';\nimport ServiceRules from './service/ServiceRules';\nimport AvailableNetmaskRules from './AvailableNetmaskRules';\nimport PodNetmastRules from './PodNetmaskRules';\n\n/**\n * Set of rules used to display the input UI\n */\nclass InputRules {\n  /**\n   * Constructor.\n   *\n   * @param {Object} input Current input.\n   */\n  constructor(input) {\n    this.clusterRules = new ClusterRules(input);\n    this.nodeRules = new NodeRules(input);\n    this.serviceRules = new ServiceRules(input);\n    this.availableNetmaskRules = new AvailableNetmaskRules();\n    this.podRules = new PodNetmastRules();\n  }\n\n  /**\n   * Returns the rules currently in effect for the cluster netmask.\n   *\n   * @return {ClusterRules} rules currently in effect\n   */\n  getClusterRules() {\n    return this.clusterRules;\n  }\n\n  /**\n   * Returns the rules currently in effect for the node netmask.\n   *\n   * @return {NodeRules} rules currently in effect\n   */\n  getNodeRules() {\n    return this.nodeRules;\n  }\n\n\n  /**\n   * Returns the rules currently in effect for the service netmask.\n   *\n   * @return {ServiceRules} rules currently in effect\n   */\n  getServiceRules() {\n    return this.serviceRules;\n  }\n\n  /**\n   * Returns the rules currently in effect for the available netmask.\n   *\n   * @return {AvailableNetmaskRules} rules currently in effect\n   */\n  getAvailableNetmaskRules() {\n    return this.availableNetmaskRules;\n  }\n\n  /**\n   * Returns the rules currently in effect for the pod netmask.\n   *\n   * @return {PodNetmaskRules} rules currently in effect\n   */\n  getPodRules() {\n    return this.podRules;\n  }\n}\n\nexport default InputRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {Form, FormGroup, Input, Label, Col} from 'reactstrap';\nimport TextDropdown from '../../components/TextDropdown';\nimport NetmaskInput from '../../components/NetmaskInput';\nimport TextDropdownInput from '../../components/TextDropdownInput';\nimport InputRules from '../../rules/input/InputRules';\nimport PropTypes from 'prop-types';\n\nconst locationTypeOptions = [\n  {value: 'ZONAL', text: 'Zonal'},\n  {value: 'MULTI_ZONAL', text: 'Multi - zonal'},\n  {value: 'REGIONAL', text: 'Regional'},\n];\n\nconst extraZoneOptions = [\n  {value: '1', text: '1'},\n  {value: '2', text: '2'},\n  {value: '3', text: '3'},\n];\n\nconst masterBlockOptions = [\n  {value: 'PUBLIC', text: 'Public Master'},\n  {value: 'SHARE', text: 'Share one Master CIDR across all clusters'},\n  {value: 'UNIQUE', text: 'Create a Unique Master CIDR for each cluster'},\n  {value: 'DEFAULT', text: 'Use default values for the Master CIDR block'},\n];\n\nconst nodePodNetmaskOptions = [\n  {value: '28', text: '8 pods (/28)', max: 8},\n  {value: '27', text: '9 to 16 pods (/27)', max: 16},\n  {value: '26', text: '17 to 32 pods (/26)', max: 32},\n  {value: '25', text: '33 to 64 pods (/25)', max: 64},\n  {value: '24', text: '65 to 110 pods (/24)', max: 110},\n];\n\n/**\n * User inputted parameters\n */\nclass Parameters extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChangeNetwork = this.handleChangeNetwork.bind(this);\n\n    this.handleLocationTypeChange = this.handleLocationTypeChange.bind(this);\n    this.handleExtraZonesChange = this.handleExtraZonesChange.bind(this);\n    this.handlePropChange = this.handlePropChange.bind(this);\n  }\n\n\n  /**\n   * Handle selecting a different location type.\n   *\n   * @param {Object} newValue the new value.\n   */\n  handleLocationTypeChange(newValue) {\n    this.props.handleUpdateInput(\n        Object.assign({}, this.props.input, {\n          locationType: newValue,\n        }),\n    );\n  }\n\n\n  /**\n   * Handle selecting a different number of extra zones (used for zonal clusters only).\n   *\n   * @param {Object} newValue the new value.\n   */\n  handleExtraZonesChange(newValue) {\n    this.props.handleUpdateInput(\n        Object.assign({}, this.props.input, {\n          extraZones: newValue,\n        }),\n    );\n  }\n\n\n  /**\n   * Handle changing the network.\n   *\n   * @param {Object} e the change event.\n   */\n  handleChangeNetwork(e) {\n    this.props.handleUpdateInput(\n        Object.assign({}, this.props.input, {\n          network: e.target.value,\n        }),\n    );\n  }\n\n  /**\n   * Handle changing an arbitrary property.\n   *\n   * @param {string} propName the name of the property to update.\n   * @param {Object} newValue the new value.\n   */\n  handlePropChange(propName, newValue) {\n    this.props.handleUpdateInput(\n        Object.assign({}, this.props.input, {\n          [propName]: newValue,\n        }),\n    );\n  }\n\n  /**\n   * Render the widgets for the parameters.\n   *\n   * @return {Object} the Form element that contains the parameters.\n   */\n  render() {\n    let extraZonesLabel;\n    let extraZonesInput;\n\n    if (this.props.input.locationType === 'MULTI_ZONAL') {\n      extraZonesLabel = (\n        <Label for=\"extra-zones-select\" sm={2}>\n          Extra Zones\n        </Label>\n      );\n      extraZonesInput = (\n        <Col sm={1}>\n          <TextDropdown\n            name=\"extra-zones-select\"\n            id=\"extra-zones-select\"\n            options={extraZoneOptions}\n            value={this.props.input.extraZones}\n            changeHandler={this.handleExtraZonesChange}\n          />\n        </Col>\n      );\n    } else {\n      extraZonesLabel = ' ';\n      extraZonesInput = ' ';\n    }\n\n    return (\n      <Form>\n        <FormGroup row>\n          <Label for=\"location-type-select\" sm={3}>\n            Location Type\n          </Label>\n          <Col sm={2}>\n            <TextDropdown\n              name=\"location-type-select\"\n              id=\"location-type-select\"\n              options={locationTypeOptions}\n              value={this.props.input.locationType}\n              changeHandler={this.handleLocationTypeChange}\n            />\n          </Col>\n          {extraZonesLabel}\n          {extraZonesInput}\n        </FormGroup>\n\n        <FormGroup row>\n          <Label for=\"network\" sm={3}>\n            {' '}\n            Available Network{' '}\n          </Label>{' '}\n          <Col sm={2}>\n            <Input\n              name=\"network\"\n              id=\"network\"\n              type=\"text\"\n              placeholder=\"10.0.0.0\"\n              value={this.props.input.network}\n              onChange={this.handleChangeNetwork}\n            />{' '}\n          </Col>{' '}\n        </FormGroup>\n\n        <NetmaskInput\n          name=\"available-netmask\"\n          label=\"Available Netmask\"\n          rules={this.props.inputRules.getAvailableNetmaskRules()}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.netmask}\n          propName=\"netmask\"\n        />\n\n        <NetmaskInput\n          name=\"node-netmask\"\n          label=\"Node Subnet mask\"\n          rules={this.props.inputRules.getNodeRules()}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.nodeNetmask}\n          propName=\"nodeNetmask\"\n        />\n\n        <NetmaskInput\n          name=\"cluster-netmask\"\n          label=\"Cluster Subnet mask\"\n          rules={this.props.inputRules.getClusterRules()}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.clusterNetmask}\n          propName=\"clusterNetmask\"\n        />\n\n        <TextDropdownInput\n          name=\"node-pod-netmask-select\"\n          label=\"Maximum Pods (Pod Netmask)\"\n          options={nodePodNetmaskOptions}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.nodePodNetmask}\n          propName=\"nodePodNetmask\"\n        />\n\n        <NetmaskInput\n          name=\"service-netmask\"\n          label=\"Service Subnet mask\"\n          rules={this.props.inputRules.getServiceRules()}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.serviceNetmask}\n          propName=\"serviceNetmask\"\n        />\n\n        <TextDropdownInput\n          name=\"master-block-select\"\n          label=\"Master CIDR block\"\n          options={masterBlockOptions}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.masterNetwork}\n          propName=\"masterNetwork\"\n        />\n      </Form>\n    );\n  }\n}\n\nParameters.propTypes = {\n  input: PropTypes.object,\n  inputRules: PropTypes.instanceOf(InputRules),\n  handleUpdateInput: PropTypes.func,\n};\n\nexport default Parameters;\n\nexport {nodePodNetmaskOptions};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities to manipulate IPs.\n */\nclass IPUtils {\n  /**\n   * Converts an IP address from decimal to dot notation.\n   *\n   * @param {number} address address in decimal notation.\n   * @return {string} address in dot notation.\n   */\n  static decToDot(address) {\n    const part1 = address & 255;\n    const part2 = (address >> 8) & 255;\n    const part3 = (address >> 16) & 255;\n    const part4 = (address >> 24) & 255;\n    return part4 + '.' + part3 + '.' + part2 + '.' + part1;\n  }\n\n  /**\n   * Converts an IP address from dot to decimal notation.\n   *\n   * @param {string} address address in dot notation.\n   * @return {number} address in decimal notation.\n   */\n  static dotToDec(address) {\n    const octets = address.match(/(\\d+)/g);\n    let total = 0;\n    for (const i in octets) {\n      if (Object.prototype.hasOwnProperty.call(octets, i)) {\n        const mul = 2 ** ((3 - i) * 8);\n        total += octets[i] * mul;\n      }\n    }\n    return total;\n  }\n\n  /**\n   * Calculate the last IP of a network with a particular netmask.\n   * @param {number} networkIp network IP.\n   * @param {number} netmask netwask for the network.\n   * @return {number} last IP of the network.\n   */\n  static netEnd(networkIp, netmask) {\n    // Logical OR between the address and the NOT netmask (bits flipped).\n    const netmaskDec = 2 ** (32 - netmask) - 1;\n    return this.fixSigned(networkIp | netmaskDec);\n  }\n\n  /**\n   * Calculate the first IP of a network with a particular netmask.\n   * @param {number} networkIp network IP.\n   * @param {number} netmask netwask for the network.\n   * @return {number} first IP of the network.\n   */\n  static netStart(networkIp, netmask) {\n    // Logical AND between the address and the netmask.\n    const netmaskDec = 4294967295 - (2 ** (32 - netmask) - 1);\n    return this.fixSigned(networkIp & netmaskDec);\n  }\n\n  /**\n * Find the largest viable netmask between to IPs.\n *\n * @param {number} currentIp start IP.\n * @param {number} endIp end IP.\n * @return {number} the largest mask between the start and end IPs.\n */\n  static findLargestMask(currentIp, endIp) {\n    const remaining = endIp - currentIp;\n    let currentBits = 0;\n    while (currentBits < 32) {\n      const ips = 2**currentBits;\n      if (remaining <= ips) {\n        return 32 - currentBits;\n      }\n      currentBits ++;\n    }\n    return NaN; // ???\n  }\n\n  /**\n   * Converts a netmask into a decimal value (bits turned on).\n   *\n   * @param {number} netmask netmask value (from 0 to 32)\n   * @return {number} decimal value of netmask in decimal format\n   */\n  static netmaskToDecimal(netmask) {\n    const v1 = 4294967295; // (2 ** 32) - 1\n    const v2 = 2 ** (32 - netmask) - 1;\n    return this.fixSigned(v1 ^ v2);\n  }\n\n  /**\n   * Deals with the fact that in JS bitwise operations\n   * 32 bit SIGNED numbers are used, so there's a possible overflow.\n   *\n   * @param {number} signed number in SIGNED format.\n   * @return {number} unsigned number\n   */\n  static fixSigned(signed) {\n    if (signed < 0) {\n      let ret = signed & 2147483647;\n      ret += 2147483648;\n      return ret;\n    }\n    return signed;\n  }\n\n  /**\n   * Calculates the number of usable IPs.\n   *\n   * @param {number} netmask network netmask.\n   * @return {number} number of usable IPs.\n   */\n  static netmaskToUsableIps(netmask) {\n    return 2 ** (32 - netmask);\n  }\n}\n\nexport default IPUtils;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport IPUtils from './IPUtils';\n\n/**\n * Pack subnets as efficient as possible withtin a given address space\n */\nclass Packer {\n  /**\n   * Packs the provided subnets into the provided space.\n   * If packing the subnets is not possible, it returns an object with 'state': 'bad'\n   *\n   * @param {*} space\n   * @param {*} subnets\n   * @return {Object} object with the packed subnets.\n   */\n  pack(space, subnets) {\n    const sortedSubnets = this.sortSubnets(subnets);\n    let currentIp = IPUtils.netStart(IPUtils.dotToDec(space.net), space.mask);\n\n    const endIp = IPUtils.netEnd(currentIp, space.mask);\n    const packedNets = [];\n    for (let i = 0; i < sortedSubnets.length; i++) {\n      const subnet = sortedSubnets[i];\n      const fit = this.fit(currentIp, endIp, subnet);\n      if (fit.fit) {\n        packedNets.push({\n          name: subnet.name,\n          mask: subnet.mask,\n          netStart: currentIp,\n          netEnd: fit.end,\n          description: subnet.description,\n          vpcName: subnet.vpcName,\n          subnetRangeName: subnet.subnetRangeName,\n          type: subnet.type,\n        });\n        currentIp = fit.end + 1;\n      } else {\n        // Couldn't fit\n        return {\n          state: 'bad',\n        };\n      }\n    }\n\n    const freeRanges=this.findEmptyRanges(space, currentIp);\n    return {\n      state: 'ok',\n      packedNets: packedNets,\n      freeRanges: freeRanges,\n    };\n  }\n\n  /**\n   * Tries to fit a subnet between spaceStart and spaceEnd\n   * @param {number} spaceStart\n   * @param {number} spaceEnd\n   * @param {number} currentNet\n   * @return {Object} object with the result\n   */\n  fit(spaceStart, spaceEnd, currentNet) {\n    const currentNetEnd = IPUtils.netEnd(spaceStart, currentNet.mask);\n    if (currentNetEnd > spaceEnd) {\n      return {\n        fit: false,\n        end: currentNetEnd,\n      };\n    }\n    return {\n      fit: true,\n      end: currentNetEnd,\n    };\n  }\n\n  /**\n   * Sorts the subnets from largest to smallest.\n   * @param {Array} subnets Subnets to sort.\n   * @return {Array} sorted subnets.\n   */\n  sortSubnets(subnets) {\n    return subnets.sort(function(a, b) {\n      if (a.mask === b.mask) {\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n      } else {\n        return a.mask - b.mask;\n      }\n    });\n  }\n\n  /**\n   * Finds the largest free CIDR blocks in a subnet, starting from a particular IP.\n   *\n   * @param {Object} space source address space.\n   * @param {number} firstFreeIpDec first free IP.\n   * @return {Array} sorted free subnet.\n   */\n  findEmptyRanges(space, firstFreeIpDec) {\n    const startIp = IPUtils.netStart(IPUtils.dotToDec(space.net), space.mask);\n    const endIp = IPUtils.netEnd(startIp, space.mask);\n    const maxIp = startIp + (endIp - firstFreeIpDec);\n    const freeNets = [];\n    let currentIp = startIp;\n    for (let mask = space.mask; mask < 32; mask ++ ) {\n      const subnet = {\n        mask: mask,\n      };\n      const fit = this.fit(currentIp, maxIp, subnet);\n      if (fit.fit) {\n        freeNets.unshift({\n          mask: mask,\n          netStart: endIp - fit.end +startIp,\n          netEnd: endIp - currentIp +startIp,\n        });\n        currentIp = fit.end + 1;\n      }\n    }\n    return freeNets;\n  }\n}\n\nexport default Packer;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport Packer from './Packer';\n\n/**\n * Object to encapsulate the business logic for doing IPAM for GKE clusters.\n */\nclass Logic {\n  /**\n   * Constructor.\n   *\n   * @param {*} input Input provided by the user.\n   */\n  constructor(input) {\n    // Calculate clusters, using Packer\n    const packer = new Packer();\n    const validCombinations = [];\n    const space = {\n      net: input.network,\n      mask: input.netmask,\n    };\n    let ok = true;\n    let count = 1;\n    while (ok && count < 1001) {\n      const networks = [];\n      const targetNumberLength = count.toString().length;\n      for (let j = 1; j <= count; j++) {\n        networks.push({\n          mask: input.nodeNetmask,\n          name: 'node-' + this.pad(targetNumberLength, j),\n          vpcName: 'vpc-' + this.pad(targetNumberLength, j),\n          subnetRangeName: 'N/A',\n          type: 'PRIMARY',\n          description:\n            'Main VPC range for node-' + this.pad(targetNumberLength, j),\n        });\n\n        networks.push({\n          mask: input.clusterNetmask,\n          name: 'cluster-' + this.pad(targetNumberLength, j),\n          vpcName: 'vpc-' + this.pad(targetNumberLength, j),\n          subnetRangeName: 'cluster-' + this.pad(targetNumberLength, j),\n          type: 'SECONDARY',\n          description:\n            'Secondary range for VPC node-' +\n            this.pad(targetNumberLength, j) +\n            ' (for pods)',\n        });\n\n        networks.push({\n          mask: input.serviceNetmask,\n          name: 'service-' + this.pad(targetNumberLength, j),\n          vpcName: 'vpc-' + this.pad(targetNumberLength, j),\n          subnetRangeName: 'service-' + this.pad(targetNumberLength, j),\n          type: 'SECONDARY',\n          description:\n            'Secondary range for VPC node-' +\n            this.pad(targetNumberLength, j) +\n            ' (for services)',\n        });\n\n        if (input.masterNetwork === 'UNIQUE') {\n          networks.push({\n            mask: 28,\n            name: 'master-' + this.pad(targetNumberLength, j),\n            vpcName: 'N/A',\n            subnetRangeName: 'N/A',\n            type: 'MANAGED',\n            description:\n              'IP range for managed VPC for master(s) for cluster node-' +\n              this.pad(targetNumberLength, j),\n          });\n        }\n      }\n\n      if (input.masterNetwork === 'SHARE') {\n        networks.push({\n          mask: 28,\n          name: 'master',\n          vpcName: 'N/A',\n          subnetRangeName: 'N/A',\n          type: 'MANAGED',\n          description:\n            'Shared IP range for managed VPC for master(s) for all clusters',\n        });\n      }\n\n      const packerResults = packer.pack(space, networks);\n      if (packerResults.state === 'ok') {\n        validCombinations.push({\n          networks: packerResults.packedNets,\n          freeRanges: packerResults.freeRanges,\n        });\n      } else {\n        ok = false;\n      }\n\n      count++;\n    }\n\n    this.combinations = validCombinations;\n  }\n\n  /**\n   * Pads the number to a target length using zeros.\n   *\n   * @param {number} targetLength number of digits to pad to.\n   * @param {string} numberToPad number to pad.\n   * @return {string} padded number.\n   */\n  pad(targetLength, numberToPad) {\n    return numberToPad.toString().padStart(targetLength, '0');\n  }\n\n  /**\n   * Returns the rules used for cluster netmask calculations.\n   *\n   * @return {*} the cluster rules.\n   */\n  getClusterRules() {\n    return this.clusterRules;\n  }\n\n  /**\n   * Returns the rules used for node netmask calculations.\n   *\n   * @return {*} the node rules.\n   */\n  getNodeRules() {\n    return this.nodeRules;\n  }\n\n  /**\n   * Returns the rules used for service netmask calculations.\n   *\n   * @return {*} the service rules.\n   */\n  getServiceRules() {\n    return this.serviceRules;\n  }\n\n  /**\n   * Returns the viable combinations.\n   *\n   * @return {*} the viable combinations.\n   */\n  getCombinations() {\n    return this.combinations;\n  }\n}\n\nexport default Logic;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport {Input, Label, FormGroup, Col} from 'reactstrap';\nimport Logic from '../../logic/Logic';\nimport PropTypes from 'prop-types';\n\n/**\n * Dropdown for the different combinations that were calculated\n */\nclass LogicOutputDropdown extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   *\n   * Create the options, one per combination\n   *\n   * @return {Object} the options for the dropdown.\n   */\n  createOptions = () => {\n    const combinations = this.props.logic.getCombinations();\n\n    const options = [];\n    combinations.forEach(function(element, index) {\n      options.push(\n          <option value={index} key={index}>Number of clusters: {index + 1} </option>,\n      );\n    });\n    return options;\n  };\n\n  /**\n   * Handle selecting a different combination.\n   *\n   * @param {Object} e the selection event.\n   */\n  handleChange(e) {\n    this.props.changeHandler(Number(e.target.value));\n  }\n\n  /**\n   * Render the dropdown.\n   *\n   * @return {Object} the dropdown for the combinations that were calculated.\n   */\n  render() {\n    return (\n      <div>\n        <FormGroup row>\n          <Label for=\"combination\" sm={2}>\n            {' '}\n            Available Combinations{' '}\n          </Label>\n          <Col sm={2}>\n            <Input\n              type=\"select\"\n              name=\"combination\"\n              id=\"exampleSelect\"\n              onChange={this.handleChange}\n            >\n              {' '}\n              {this.createOptions()}{' '}\n            </Input>{' '}\n          </Col>{' '}\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nLogicOutputDropdown.propTypes = {\n  logic: PropTypes.instanceOf(Logic),\n  input: PropTypes.object,\n  changeHandler: PropTypes.func,\n};\n\nexport default LogicOutputDropdown;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport IPUtils from '../../logic/IPUtils';\nimport PropTypes from 'prop-types';\n\n/**\n * A row for a particular subnet definition\n */\nclass LogicOutputNetworkRow extends Component {\n  /**\n   * Pretty format the subnet type.\n   * @param {type} type The subnet type.\n   * @return {string} subnet type text.\n   */\n  subnetTypeText(type) {\n    if (type === 'PRIMARY') {\n      return 'Primary';\n    } else if (type === 'SECONDARY') {\n      return 'Secondary';\n    } else if (type === 'MANAGED') {\n      return 'Google Managed';\n    }\n    return 'N/A';\n  }\n\n  /**\n   * Render the row.\n   *\n   * @return {Object} the table row for the network.\n   */\n  render() {\n    return (\n      <tr>\n        <td>\n          {' '}\n          {IPUtils.decToDot(this.props.network.netStart)}/\n          {this.props.network.mask}\n        </td>\n        <td> {IPUtils.decToDot(this.props.network.netStart)} </td>\n        <td> {IPUtils.decToDot(this.props.network.netEnd)} </td>\n        <td> {this.props.network.name} </td>\n        <td> {this.props.network.vpcName} </td>\n        <td> {this.props.network.subnetRangeName} </td>\n        <td> {this.subnetTypeText(this.props.network.type)} </td>\n        <td> {this.props.network.description} </td>\n      </tr>\n    );\n  }\n}\n\nLogicOutputNetworkRow.propTypes = {\n  network: PropTypes.object,\n};\n\nexport default LogicOutputNetworkRow;\n","// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport IPUtils from '../../logic/IPUtils';\nimport PropTypes from 'prop-types';\n\n/**\n * A row for an available or free subnet.\n */\nclass LogicOutputFreeNetworkRow extends Component {\n  /**\n   * Render the row.\n   *\n   * @return {Object} the table row for the network.\n   */\n  render() {\n    return (\n      <tr>\n        <td>\n          {' '}\n          {IPUtils.decToDot(this.props.network.netStart)}/\n          {this.props.network.mask}\n        </td>\n        <td> {IPUtils.decToDot(this.props.network.netStart)} </td>\n        <td> {IPUtils.decToDot(this.props.network.netEnd)} </td>\n        <td> /{this.props.network.mask} </td>\n      </tr>\n    );\n  }\n}\n\nLogicOutputFreeNetworkRow.propTypes = {\n  network: PropTypes.object,\n};\n\nexport default LogicOutputFreeNetworkRow;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport IPUtils from '../../logic/IPUtils';\n\n/**\n * Rules for the main subnet range based on the subnet size\n */\nclass NodeNetworkRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input User input.\n   */\n  constructor(input) {\n    this.input = input;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    const netmask = this.input.nodeNetmask;\n    // TODO allow reserving IPs on the Node Network\n    return IPUtils.netmaskToUsableIps(netmask) - 4; // GCP reserves 4 ips.\n  }\n\n  /**\n   * Returns the reference documentation URLs.\n   *\n   * @return {Array} an Array with a list of URLs.\n   */\n  ref() {\n    return [\n      'https://cloud.google.com/vpc/docs/vpc#reserved_ip_addresses_in_every_subnet',\n    ];\n  }\n}\n\n/**\n * Rules for the main subnet range based on the cluster subnet size size\n */\nclass ClusterNetworkRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input User input.\n   */\n  constructor(input) {\n    this.input = input;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    const clusterNetmaskIps = IPUtils.netmaskToUsableIps(\n        this.input.clusterNetmask,\n    );\n    const podNetmaskIps = IPUtils.netmaskToUsableIps(this.input.nodePodNetmask);\n    return clusterNetmaskIps / podNetmaskIps;\n  }\n\n  /**\n   * Returns the reference documentation URLs.\n   *\n   * @return {Array} an Array with a list of URLs.\n   */\n  ref() {\n    return [];\n  }\n}\n\n/**\n * Rules for the main subnet range based on location type (Regional, zonal, multi-zonal).\n */\nclass RegionalLocationRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input User input.\n   * @param {number} currentMax Current possible maximum based on upstream rules.\n   */\n  constructor(input, currentMax) {\n    this.input = input;\n    this.currentMax = currentMax;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    if (this.input.locationType === 'REGIONAL') {\n      return this.currentMax - (this.currentMax % 3);\n    } else if (this.input.locationType === 'MULTI_ZONAL') {\n      return (\n        this.currentMax -\n        (this.currentMax % (Number.parseInt(this.input.extraZones) + 1))\n      );\n    }\n    return this.currentMax;\n  }\n\n  /**\n   * Returns the reference documentation URLs.\n   *\n   * @return {Array} an Array with a list of URLs.\n   */\n  ref() {\n    return [];\n  }\n}\n\n/**\n * Rules for the main subnet range based on the aggregate of NodeNetworkRules and ClusterNetworkRules\n */\nclass NodeOutputRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input User input.\n   */\n  constructor(input) {\n    this.input = input;\n    this.nodeNetworkRules = new NodeNetworkRules(this.input);\n    this.clusterNetworkRules = new ClusterNetworkRules(this.input);\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    const v1 = this.nodeNetworkRules.maximum();\n    const v2 = this.clusterNetworkRules.maximum();\n\n    const regionalLocationRules = new RegionalLocationRules(\n        this.input,\n      v1 < v2 ? v1 : v2,\n    );\n\n    return regionalLocationRules.maximum();\n  }\n\n  /**\n   * @return{Array} list of details that are affecting the maximum size.\n   */\n  details() {\n    const details = [];\n    details.push({\n      id: 'subnet_limit',\n      text: `The node subnet will limit each cluster to a maximum of ${this.nodeNetworkRules.maximum()} node(s).`,\n    });\n    details.push({\n      id: 'cluster_limit',\n      text: `The cluster subnet will limit each cluster to a maximum of ${this.clusterNetworkRules.maximum()} node(s).`,\n    });\n    if (this.input.locationType === 'REGIONAL') {\n      details.push({\n        id: 'regional_multiple_limit',\n        text: `Nodes in a regional cluster have to be deployed in multiples of three`,\n      });\n    } else if (this.input.locationType === 'MULTI_ZONAL') {\n      details.push({\n        id: 'zonal_multiple_limit',\n        text: `Nodes in a multi-zonal cluster (with ${\n          this.input.extraZones\n        } extra zone) have to be deployed in multiples of ${Number.parseInt(\n            this.input.extraZones,\n        ) + 1}`,\n      });\n    }\n\n    return details;\n  }\n}\n\nexport default NodeOutputRules;\n\nexport {NodeNetworkRules, ClusterNetworkRules};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport IPUtils from '../../logic/IPUtils';\n\n/**\n * Rules for the Service subnet range\n */\nclass ServiceOutputRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input\n   */\n  constructor(input) {\n    this.input = input;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    const serviceIps = IPUtils.netmaskToUsableIps(this.input.serviceNetmask);\n    return serviceIps;\n  }\n}\n\nexport default ServiceOutputRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {nodePodNetmaskOptions} from '../../ui/input/Parameters';\n\n/**\n * Rules for the Pod subnet range\n */\nclass PodOutputRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input\n   */\n  constructor(input) {\n    this.input = input;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    let i;\n    for (i = 0; i < nodePodNetmaskOptions.length; ++i) {\n      if (nodePodNetmaskOptions[i].value === this.input.nodePodNetmask) {\n        return nodePodNetmaskOptions[i].max;\n      }\n    }\n    return NaN;\n  }\n}\n\nexport default PodOutputRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport LogicOutputDropdown from './LogicOutputDropdown';\nimport LogicOutputNetworkRow from './LogicOutputNetworkRow';\nimport LogicOutputFreeNetworkRow from './LogicOutputFreeNetworkRow';\nimport {Table} from 'reactstrap';\nimport NodeOutputRules from '../../rules/output/NodeOutputRules';\nimport ServiceOutputRules from '../../rules/output/ServiceOutpuRules';\nimport PodOutputRules from '../../rules/output/PodOutputRules';\nimport Logic from '../../logic/Logic';\nimport PropTypes from 'prop-types';\n\n/**\n * Container object for outputting the results of the calculation logic.\n */\nclass LogicOutput extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    const output = {\n      combinationIndex: 0,\n    };\n\n    this.state = {\n      output: output,\n    };\n\n    this.handleUpdateOutput = this.handleUpdateOutput.bind(this);\n    this.handleChangeCombination = this.handleChangeCombination.bind(this);\n  }\n  /**\n   *\n   * Create the detail.\n   *\n   * @param {Object} nodeOutputRules rules that were used to compute the output.\n   * @return {Object} the details for the rules.\n   */\n  createDetail = (nodeOutputRules) => {\n    const details = [];\n\n    const nodeDetails = nodeOutputRules.details();\n    nodeDetails.forEach((detail) => {\n      details.push(<div key={detail.id}>{detail.text}</div>);\n    });\n\n    return details;\n  };\n\n  /**\n   *\n   * Create the rows.\n   *\n   * @return {Object} the details rows.\n   */\n  createRows = () => {\n    const logic = this.props.logic;\n    const combination = logic.getCombinations()[\n        this.state.output.combinationIndex\n    ];\n    const networks = combination.networks;\n    const rows = [];\n\n    networks.forEach((network) => {\n      rows.push(<LogicOutputNetworkRow key={network.name} network={network} />);\n    });\n\n    return rows;\n  };\n\n  /**\n   *\n   * Create the rows representing the available or free CIDR ranges.\n   *\n   * @return {Object} the details rows.\n   */\n  createFreeRows = () => {\n    const logic = this.props.logic;\n    const combination = logic.getCombinations()[\n        this.state.output.combinationIndex\n    ];\n    const freeRanges = combination.freeRanges;\n    const rows = [];\n\n    freeRanges.forEach((freeRange) => {\n      rows.push(<LogicOutputFreeNetworkRow key={freeRange.netStart} network={freeRange} />);\n    });\n\n    return rows;\n  };\n\n\n  /**\n   *\n   * Create the detail tables.\n   *\n   * @return {Object} the detail tables.\n   */\n  createTables = () => {\n    const logic = this.props.logic;\n    if (logic.getCombinations().length<this.state.output.combinationIndex) {\n      return (<div><h3> Invalid Combination Selected </h3></div>);\n    }\n\n    return (<div><h3> VPCs and Subnets required </h3>\n      <Table>\n        <tbody>\n          <tr>\n            <th> Network </th>\n            <th> Start </th>\n            <th> End </th>\n            <th> Name </th>\n            <th> VPC Name </th>\n            <th> Subnet Range Name </th>\n            <th> Subnet Range Type </th>\n            <th> Description </th>\n          </tr>\n          {this.createRows()}\n        </tbody>\n      </Table>{' '}\n      <h3> Free Subnets </h3>\n      <Table>\n        <tbody>\n          <tr>\n            <th> Network </th>\n            <th> Start </th>\n            <th> End </th>\n            <th> Netmask </th>\n          </tr>\n          {this.createFreeRows()}\n        </tbody>\n      </Table>\n    </div>);\n  }\n\n  /**\n   * Handle the selection of a different combination to be displayed.\n   *\n   * @param {number} combinationIndex The index of the combinations to be displayed.\n   */\n  handleChangeCombination(combinationIndex) {\n    this.handleUpdateOutput(\n        Object.assign({}, this.state.output, {\n          combinationIndex: combinationIndex,\n        }),\n    );\n  }\n\n  /**\n   * Update the output.\n   *\n   * @param {object} output The updated output.\n   */\n  handleUpdateOutput(output) {\n    this.setState({\n      output: output,\n    });\n  }\n\n  /**\n   * Render the main output component.\n   *\n   * @return {Object} the main <div> for the output.\n   */\n  render() {\n    const nodeOutputRules = new NodeOutputRules(this.props.input);\n    const serviceOutputRules = new ServiceOutputRules(this.props.input);\n    const podOutputRules = new PodOutputRules(this.props.input);\n\n    return (\n      <div>\n        <div>\n          <b> Summary </b> <br />\n          With the current configuration, up to{' '}\n          {this.props.logic.getCombinations().length} isolated clusters can be\n          created. <br />\n          Each cluster will suppport: <br />\n          Up to {nodeOutputRules.maximum()} node(s) per cluster. <br />\n          Up to {serviceOutputRules.maximum()} service(s) per cluster. <br />\n          Up to {podOutputRules.maximum()} pods per node. <br />\n        </div>\n        <div>\n          <b>Details</b>\n          <br />\n          {this.createDetail(nodeOutputRules)}\n        </div>\n        <LogicOutputDropdown\n          logic={this.props.logic}\n          changeHandler={this.handleChangeCombination}\n        />{' '}\n        {this.createTables()}\n      </div>\n    );\n  }\n}\n\n\nLogicOutput.propTypes = {\n  logic: PropTypes.instanceOf(Logic),\n  input: PropTypes.object,\n};\n\nexport default LogicOutput;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport LogicOutput from './LogicOutput';\nimport PropTypes from 'prop-types';\n\n\n/**\n * Class for the results of the calculations\n */\nclass Results extends Component {\n  /**\n   * Render the actual results.\n   *\n   * @return {Object} the results or error message.\n   */\n  printReslts() {\n    if (\n      this.props.state.logic &&\n      this.props.state.logic.getCombinations() &&\n      this.props.state.logic.getCombinations().length > 0\n    ) {\n      return (\n        <LogicOutput\n          logic={this.props.state.logic}\n          input={this.props.state.input}\n        />\n      );\n    } else {\n      return <div> Invalid Input </div>;\n    }\n  }\n\n\n  /**\n   * Render the results component.\n   *\n   * @return {Object} the main <div> for the results.\n   */\n  render() {\n    return (\n      <div>\n        <hr/>\n        <h2> Results </h2>\n        {this.printReslts()}\n      </div>\n    );\n  }\n}\n\nResults.propTypes = {\n  state: PropTypes.object,\n};\n\nexport default Results;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Col,\n  Input,\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to hold buttons to manage the state of applications.\n */\nclass StateButtons extends React.Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      downloadModal: false,\n      uploadModal: false,\n      configText: '',\n    };\n\n    this.toggleDownload = this.toggleDownload.bind(this);\n    this.toggleUpload = this.toggleUpload.bind(this);\n    this.uploadConfig = this.uploadConfig.bind(this);\n    this.handleConfigText = this.handleConfigText.bind(this);\n  }\n\n  /**\n   * Handle ingesting new text for the configuration.\n   *\n   * @param {Object} e the selection event.\n   */\n  handleConfigText(e) {\n    this.setState(\n        Object.assign({}, this.state.input, {\n          configText: e.target.value,\n        }),\n    );\n  }\n\n  /**\n   * Show the download modal dialog\n   */\n  toggleDownload() {\n    this.setState((prevState) => ({\n      downloadModal: !prevState.downloadModal,\n      uploadModal: prevState.uploadModal,\n      configText: '',\n    }));\n  }\n\n  /**\n   * Show the upload modal dialog\n   */\n  toggleUpload() {\n    this.setState((prevState) => ({\n      downloadModal: prevState.downloadModal,\n      uploadModal: !prevState.uploadModal,\n      configText: '',\n    }));\n  }\n\n  /**\n   * Hide the upload modal dialog, and ingest the config text.\n   */\n  uploadConfig() {\n    this.toggleUpload();\n    this.props.handleUploadConfig(this.state.configText);\n  }\n\n  /**\n   * Render the Col element.\n   *\n   * @return {Object} the Col element that contains the buttons.\n   */\n  render() {\n    return (\n      <Col className=\"text-right \">\n        <Button color=\"primary\" onClick={this.toggleDownload}>\n          Download Config\n        </Button>{' '}\n        <Modal isOpen={this.state.downloadModal} toggle={this.toggleDownload}>\n          <ModalHeader toggle={this.toggleDownload}>\n            Current Configuration\n          </ModalHeader>\n          <ModalBody>\n            <pre>{this.props.input}</pre>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.toggleDownload}>\n              Close\n            </Button>\n          </ModalFooter>\n        </Modal>\n        <Button color=\"secondary\" onClick={this.toggleUpload}>\n          Upload Config\n        </Button>{' '}\n        <Modal isOpen={this.state.uploadModal} toggle={this.toggleUpload}>\n          <ModalHeader toggle={this.toggleUpload}>\n            Upload Configuration\n          </ModalHeader>\n          <ModalBody>\n            <Input\n              type=\"textarea\"\n              name=\"text\"\n              id=\"exampleText\"\n              rows=\"15\"\n              onChange={this.handleConfigText}\n            />\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.uploadConfig}>\n              Upload\n            </Button>\n            <Button color=\"secondary\" onClick={this.toggleUpload}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </Col>\n    );\n  }\n}\n\nStateButtons.propTypes = {\n  input: PropTypes.string,\n  handleUploadConfig: PropTypes.func,\n};\n\nexport default StateButtons;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport './App.css';\nimport {Container, Row} from 'reactstrap';\n\nimport Parameters from './ui/input/Parameters';\nimport Results from './ui/output/Results';\nimport Logic from './logic/Logic';\n\nimport InputRules from './rules/input/InputRules';\nimport StateButtons from './components/StateButtons';\n\n/**\n * Main component for the UI. It's the glue logic between the input, business logic, and output.\n */\nclass Calculator extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {*} props Properties.\n   */\n  constructor(props) {\n    super(props);\n\n    // TODO Need to use better defaults\n    const input = {\n      network: '10.0.0.0',\n      netmask: 16,\n      nodeNetmask: 29,\n      clusterNetmask: 24,\n      serviceNetmask: 24,\n      nodePodNetmask: '24',\n      masterNetwork: 'PUBLIC',\n      locationType: 'ZONAL',\n      extraZones: 1,\n    };\n    const logic = new Logic(input);\n    const inputRules = new InputRules(input);\n\n    this.state = {\n      input: input,\n      logic: logic,\n      inputRules: inputRules,\n    };\n\n    this.handleUpdateInput = this.handleUpdateInput.bind(this);\n\n    this.handleUploadConfig = this.handleUploadConfig.bind(this);\n  }\n\n  /**\n   * Handle uploading a complete new config text.\n   *\n   * @param {string} configText the new config text.\n   */\n  handleUploadConfig(configText) {\n    const newInput = JSON.parse(configText);\n    this.handleUpdateInput(newInput);\n  }\n\n  /**\n   * Handle updating the input from the UI.\n   *\n   * @param {Object} input the new input.\n   */\n  handleUpdateInput(input) {\n    let logic;\n    if (this.validateInput(input)) {\n      logic = new Logic(input);\n    }\n    this.setState({\n      input: input,\n      logic: logic,\n      inputRules: new InputRules(input),\n    });\n  }\n\n  /**\n   * Validates that the input is valid.\n   *\n   * @param {Object} input Input structure.\n   * @return {boolean} True if valid, false otherwise.\n   */\n  validateInput(input) {\n    if (!Number.isInteger(input.netmask)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Render the div element that holds most of the application.\n   *\n   * @return {Object} the div element with the application.\n   */\n  render() {\n    return (\n      <div className=\"workspace\">\n        <br />\n        <Container>\n          <Row>\n            <StateButtons\n              input={JSON.stringify(this.state.input, null, ' ')}\n              handleUploadConfig={this.handleUploadConfig}\n            />\n          </Row>\n        </Container>\n        <br />\n        <Parameters\n          input={this.state.input}\n          inputRules={this.state.inputRules}\n          handleUpdateInput={this.handleUpdateInput}\n        />\n\n        <hr />\n        <h2>Input</h2>\n        <pre>{JSON.stringify(this.state.input, null, ' ')}</pre>\n\n        <Results state={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {\n  Component,\n} from 'react';\nimport './App.css';\nimport Calculator from './Calculator';\n\n/**\n * Main application class.\n */\nclass App extends Component {\n  /**\n   * Render the main application component.\n   *\n   * @return {Object} the main <div> for the application.\n   */\n  render() {\n    return ( <div className = \"App\" >\n      <header className = \"App-header\" >\n        <h1 > GKE IP Address Management </h1>\n      </header>\n\n      <Calculator / >\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint no-console: [\"off\"], require-jsdoc: [\"off\"] */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render( < App / >, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}