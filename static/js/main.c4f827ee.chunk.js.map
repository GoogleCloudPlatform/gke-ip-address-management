{"version":3,"sources":["components/TextDropdown.js","components/NetmaskDropdown.js","components/NetmaskInput.js","components/TextDropdownInput.js","rules/input/BaseNetmaskRules.js","rules/input/cluster/ClusterRules.js","rules/input/node/NodeRules.js","rules/input/service/ServiceRules.js","rules/input/AvailableNetmaskRules.js","rules/input/PodNetmaskRules.js","rules/input/InputRules.js","ui/input/Parameters.js","logic/IPUtils.js","logic/Packer.js","logic/Logic.js","ui/output/LogicOutputDropdown.js","ui/output/LogicOutputNetworkRow.js","ui/output/LogicOutputFreeNetworkRow.js","rules/output/NodeOutputRules.js","rules/output/ServiceOutpuRules.js","rules/output/PodOutputRules.js","ui/output/LogicOutput.js","ui/output/Results.js","components/StateButtons.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["TextDropdown","props","createOptions","options","forEach","s","push","value","key","text","handleChange","bind","e","this","changeHandler","target","type","name","id","onChange","Component","NetmaskDropdown","min","rules","minimum","max","maximum","i","Number","NetmaskInput","propName","row","for","sm","label","TextDropdownInput","reducerMax","accumulator","currentValue","reducerMin","BaseNetmaskRules","minRules","maxRules","reduce","HardcodedMin","NetmaskMax","state","netmask","ClusterRules","NodeRules","ServiceRules","HardcodedMax","AvailableNetmaskRules","PodNetmastRules","InputRules","input","clusterRules","nodeRules","serviceRules","availableNetmaskRules","podRules","locationTypeOptions","extraZoneOptions","masterBlockOptions","nodePodNetmaskOptions","Parameters","handleChangeNetwork","handleLocationTypeChange","handleExtraZonesChange","handlePropChange","newValue","handleUpdateInput","Object","assign","locationType","extraZones","network","extraZonesLabel","extraZonesInput","placeholder","inputRules","getAvailableNetmaskRules","getNodeRules","nodeNetmask","getClusterRules","clusterNetmask","nodePodNetmask","getServiceRules","serviceNetmask","masterNetwork","IPUtils","address","octets","match","total","prototype","hasOwnProperty","call","mul","networkIp","netmaskDec","fixSigned","currentIp","endIp","remaining","currentBits","NaN","v2","signed","ret","Packer","space","subnets","sortedSubnets","sortSubnets","netStart","dotToDec","net","mask","netEnd","packedNets","length","subnet","fit","end","description","vpcName","subnetRangeName","freeRanges","findEmptyRanges","spaceStart","spaceEnd","currentNet","currentNetEnd","sort","a","b","firstFreeIpDec","startIp","maxIp","freeNets","unshift","Logic","packer","validCombinations","ok","count","networks","targetNumberLength","toString","j","pad","packerResults","pack","combinations","targetLength","numberToPad","padStart","LogicOutputDropdown","logic","getCombinations","element","index","LogicOutputNetworkRow","decToDot","subnetTypeText","LogicOutputFreeNetworkRow","NodeNetworkRules","netmaskToUsableIps","ClusterNetworkRules","RegionalLocationRules","currentMax","parseInt","NodeOutputRules","nodeNetworkRules","clusterNetworkRules","v1","details","ServiceOutputRules","PodOutputRules","LogicOutput","createDetail","nodeOutputRules","detail","createRows","output","combinationIndex","rows","createFreeRows","freeRange","createTables","handleUpdateOutput","handleChangeCombination","setState","serviceOutputRules","podOutputRules","Results","printReslts","StateButtons","downloadModal","uploadModal","configText","toggleDownload","toggleUpload","uploadConfig","handleConfigText","prevState","handleUploadConfig","className","color","onClick","isOpen","toggle","React","Calculator","newInput","JSON","parse","validateInput","isInteger","stringify","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4f827ee.chunk.js","sourcesContent":["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {Input} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to display an Input element for a text dropdown\n */\nclass TextDropdown extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  /**\n   * Handle selecting a different item.\n   *\n   * @param {Object} e the selection event.\n   */\n  handleChange(e) {\n    this.props.changeHandler(e.target.value);\n  }\n\n  /**\n   *\n   * Create the options.\n   *\n   * @return {Object} the options for the dropdown.\n   */\n  createOptions = () => {\n    const options = [];\n    this.props.options.forEach((s) => {\n      options.push(<option value={s.value} key={s.value}>{s.text}</option>);\n    });\n    return options;\n  };\n\n  /**\n   * Render the Input element.\n   *\n   * @return {Object} the Input element for a text dropdown.\n   */\n  render() {\n    if (this.props.value === '' || this.props.value === null) {\n      return (\n        <Input\n          type=\"select\"\n          name={this.props.name}\n          id={this.props.id}\n          onChange={this.handleChange}\n        >\n          {this.createOptions()}\n        </Input>\n      );\n    } else {\n      return (\n        <Input\n          type=\"select\"\n          name={this.props.name}\n          id={this.props.id}\n          onChange={this.handleChange}\n          value={this.props.value}\n        >\n          {this.createOptions()}\n        </Input>\n      );\n    }\n  }\n}\n\n\nTextDropdown.propTypes = {\n  id: PropTypes.string,\n  options: PropTypes.array,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  changeHandler: PropTypes.func,\n};\n\nexport default TextDropdown;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {Input} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to display an Input element for a dropdown to select netmask values.\n */\nclass NetmaskDropdown extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handle selecting a different value.\n   *\n   * @param {Object} e the selection event.\n   */\n  handleChange(e) {\n    this.props.changeHandler(Number(e.target.value));\n  }\n\n  /**\n   *\n   * Create the options.\n   *\n   * @return {Object} the options for the dropdown.\n   */\n  createOptions = () => {\n    const min = this.props.rules.minimum().minimum();\n    const max = this.props.rules.maximum().maximum();\n    const options = [];\n\n    for (let i = min; i >= max; i--) {\n      options.push(<option value={i} key={i}>/{i}</option>);\n    }\n    return options;\n  };\n\n  /**\n   * Render the Input element.\n   *\n   * @return {Object} the Input element for the netmask dropdown.\n   */\n  render() {\n    if (this.props.value === '' || this.props.value === null) {\n      return (\n        <Input\n          type=\"select\"\n          name=\"select\"\n          id=\"exampleSelect\"\n          onChange={this.handleChange}\n        >\n          {this.createOptions()}\n        </Input>\n      );\n    } else {\n      return (\n        <Input\n          type=\"select\"\n          name=\"select\"\n          id=\"exampleSelect\"\n          onChange={this.handleChange}\n          value={this.props.value}\n        >\n          {this.createOptions()}\n        </Input>\n      );\n    }\n  }\n}\n\nNetmaskDropdown.propTypes = {\n  rules: PropTypes.object,\n  value: PropTypes.number,\n  changeHandler: PropTypes.func,\n};\n\nexport default NetmaskDropdown;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {FormGroup, Label, Col} from 'reactstrap';\nimport NetmaskDropdown from './NetmaskDropdown';\nimport PropTypes from 'prop-types';\n\n\n/**\n * Component to display an FormGroup element that contains a dropdown to select netmask values.\n */\nclass NetmaskInput extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handle selecting a different value.\n   *\n   * @param {Object} value the selected value.\n   */\n  handleChange(value) {\n    this.props.changeHandler(this.props.propName, value);\n  }\n\n  /**\n   * Render the FormGroup element.\n   *\n   * @return {Object} the FormGroup element that contains the netmask dropdown.\n   */\n  render() {\n    return (\n      <FormGroup row>\n        <Label for=\"{this.props.name}\" sm={3}>\n          {this.props.label}\n        </Label>\n        <Col sm={2}>\n          <NetmaskDropdown\n            name={this.props.name}\n            rules={this.props.rules}\n            changeHandler={this.handleChange}\n            value={this.props.value}\n          />\n        </Col>\n      </FormGroup>\n    );\n  }\n}\n\nNetmaskInput.propTypes = {\n  rules: PropTypes.object,\n  value: PropTypes.number,\n  label: PropTypes.string,\n  name: PropTypes.string,\n  propName: PropTypes.string,\n  changeHandler: PropTypes.func,\n};\n\nexport default NetmaskInput;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {FormGroup, Label, Col} from 'reactstrap';\nimport TextDropdown from './TextDropdown';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to display a Form element for a text dropdown\n */\nclass TextDropdownInput extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handle selecting a different value.\n   *\n   * @param {Object} value the selection value.\n   */\n  handleChange(value) {\n    this.props.changeHandler(this.props.propName, value);\n  }\n\n  /**\n   * Render the From element.\n   *\n   * @return {Object} the From element for a text dropdown.\n   */\n  render() {\n    return (\n      <FormGroup row>\n        <Label for=\"{this.props.name}\" sm={3}>\n          {this.props.label}\n        </Label>\n        <Col sm={2}>\n          <TextDropdown\n            name={this.props.name}\n            id={this.props.name}\n            options={this.props.options}\n            value={this.props.value}\n            changeHandler={this.handleChange}\n          />\n        </Col>\n      </FormGroup>\n    );\n  }\n}\n\nTextDropdownInput.propTypes = {\n  propName: PropTypes.string,\n  label: PropTypes.string,\n  options: PropTypes.array,\n  name: PropTypes.string,\n  value: PropTypes.string,\n  changeHandler: PropTypes.func,\n};\n\n\nexport default TextDropdownInput;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nconst reducerMax = (accumulator, currentValue) =>\n  accumulator == null || currentValue.maximum() > accumulator.maximum()\n    ? currentValue\n    : accumulator;\n\nconst reducerMin = (accumulator, currentValue) =>\n  accumulator == null || currentValue.maximum() < accumulator.maximum()\n    ? currentValue\n    : accumulator;\n\n/**\n * Base class for the rules that define the maximum and minimum netmasks to show\n */\nclass BaseNetmaskRules {\n  /**\n   *\n   * Constructor.\n   *\n   * @param {Object} minRules\n   * @param {Object} maxRules\n   */\n  constructor(minRules, maxRules) {\n    this.minRules = minRules;\n    this.maxRules = maxRules;\n  }\n\n  /**\n   * Calculate the minimum netmask possible.\n   *\n   * @return {number} minimum netmask possible.\n   */\n  minimum() {\n    return this.minRules.reduce(reducerMin);\n  }\n\n  /**\n   * Calculate the max netmask possible.\n   *\n   * @return {number} max netmask possible.\n   */\n  maximum() {\n    return this.maxRules.reduce(reducerMax);\n  }\n}\n\nexport default BaseNetmaskRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from '../BaseNetmaskRules';\n\n/**\n * Hardcoded minimum limit for cluster ranges\n */\nclass HardcodedMin {\n  /**\n   * Return the minimum for the range\n   *\n   * @return {number} range minimum\n   */\n  minimum() {\n    return 24;\n  }\n\n\n  /**\n   * Returns the reference documentation URL.\n   *\n   * @return {string} reference URL.\n   */\n  ref() {\n    return 'https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips#defaults_limits';\n  }\n}\n\n\n/**\n * Maximum limit for cluster ranges, based on available netmask\n */\nclass NetmaskMax {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    this.state = state;\n  }\n\n  /**\n   * Return the max for the range\n   *\n   * @return {number} range max\n   */\n  maximum() {\n    return this.state.netmask;\n  }\n}\n\n/**\n * Rules for available range of cluster netmask options.\n */\nclass ClusterRules extends BaseNetmaskRules {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    super([new HardcodedMin()], [new NetmaskMax(state)]);\n  }\n}\n\nexport default ClusterRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from '../BaseNetmaskRules';\n\n/**\n * Hardcoded minimum limit for node ranges\n */\nclass HardcodedMin {\n  /**\n   * Return the minimum for the range\n   *\n   * @return {number} range minimum\n   */\n  minimum() {\n    return 29;\n  }\n\n  /**\n   * Returns the reference documentation URL.\n   *\n   * @return {string} reference URL.\n   */\n  ref() {\n    return 'https://cloud.google.com/vpc/docs/vpc#manually_created_subnet_ip_ranges';\n  }\n}\n\n/**\n * Maximum limit for node ranges, based on available netmask\n */\nclass NetmaskMax {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    this.state = state;\n  }\n\n  /**\n   * Return the max for the range\n   *\n   * @return {number} range max\n   */\n  maximum() {\n    return this.state.netmask;\n  }\n}\n\n/**\n * Rules for available range of node netmask options.\n */\nclass NodeRules extends BaseNetmaskRules {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    super([new HardcodedMin()], [new NetmaskMax(state)]);\n  }\n}\n\nexport default NodeRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from '../BaseNetmaskRules';\n\n/**\n * Hardcoded minimum limit for service ranges\n */\nclass HardcodedMin {\n  /**\n   * Return the minimum for the range\n   *\n   * @return {number} range minimum\n   */\n  minimum() {\n    return 27;\n  }\n\n\n  /**\n   * Returns the reference documentation URL.\n   *\n   * @return {string} reference URL.\n   */\n  ref() {\n    return 'https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips#defaults_limits';\n  }\n}\n\n\n/**\n * Maximum limit for service ranges, based on available netmask\n */\nclass NetmaskMax {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    this.state = state;\n  }\n\n  /**\n   * Return the max for the range\n   *\n   * @return {number} range max\n   */\n  maximum() {\n    return this.state.netmask;\n  }\n}\n\n\n/**\n * Rules for available range of service netmask options.\n */\nclass ServiceRules extends BaseNetmaskRules {\n  /**\n   * Constructor.\n   *\n   * @param {Object} state Current state.\n   */\n  constructor(state) {\n    super([new HardcodedMin()], [new NetmaskMax(state)]);\n  }\n}\n\nexport default ServiceRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from './BaseNetmaskRules';\n\n/**\n * Rule that define the minimum available netmask\n */\nclass HardcodedMin {\n  /**\n   * Calculate the minimum netmask possible.\n   *\n   * @return {number} minimum netmask possible.\n   */\n  minimum() {\n    return 29;\n  }\n}\n\n/**\n * Rule that define the maximum available netmask\n */\nclass HardcodedMax {\n  /**\n   * Calculate the maximum netmask possible.\n   *\n   * @return {number} maximum netmask possible.\n   */\n  maximum() {\n    return 8;\n  }\n}\n\n/**\n * Rules that define the available netmasks to show\n */\nclass AvailableNetmaskRules extends BaseNetmaskRules {\n  /**\n   *\n   * Constructor.\n   */\n  constructor() {\n    super([new HardcodedMin()], [new HardcodedMax()]);\n  }\n}\n\nexport default AvailableNetmaskRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport BaseNetmaskRules from './BaseNetmaskRules';\n\n/**\n * Hardcoded minimum limit for pod ranges\n */\nclass HardcodedMin {\n  /**\n   * Return the minimum for the range\n   *\n   * @return {number} range minimum\n   */\n  minimum() {\n    return 28;\n  }\n}\n\n/**\n * Hardcoded max limit for pod ranges\n */\nclass HardcodedMax {\n  /**\n   * Return the max for the range\n   *\n   * @return {number} range max\n   */\n  maximum() {\n    return 24;\n  }\n}\n\n\n/**\n * Rules for available range of pod netmask options.\n */\nclass PodNetmastRules extends BaseNetmaskRules {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    super([new HardcodedMin()], [new HardcodedMax()]);\n  }\n}\n\nexport default PodNetmastRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport ClusterRules from './cluster/ClusterRules';\nimport NodeRules from './node/NodeRules';\nimport ServiceRules from './service/ServiceRules';\nimport AvailableNetmaskRules from './AvailableNetmaskRules';\nimport PodNetmastRules from './PodNetmaskRules';\n\n/**\n * Set of rules used to display the input UI\n */\nclass InputRules {\n  /**\n   * Constructor.\n   *\n   * @param {Object} input Current input.\n   */\n  constructor(input) {\n    this.clusterRules = new ClusterRules(input);\n    this.nodeRules = new NodeRules(input);\n    this.serviceRules = new ServiceRules(input);\n    this.availableNetmaskRules = new AvailableNetmaskRules();\n    this.podRules = new PodNetmastRules();\n  }\n\n  /**\n   * Returns the rules currently in effect for the cluster netmask.\n   *\n   * @return {ClusterRules} rules currently in effect\n   */\n  getClusterRules() {\n    return this.clusterRules;\n  }\n\n  /**\n   * Returns the rules currently in effect for the node netmask.\n   *\n   * @return {NodeRules} rules currently in effect\n   */\n  getNodeRules() {\n    return this.nodeRules;\n  }\n\n\n  /**\n   * Returns the rules currently in effect for the service netmask.\n   *\n   * @return {ServiceRules} rules currently in effect\n   */\n  getServiceRules() {\n    return this.serviceRules;\n  }\n\n  /**\n   * Returns the rules currently in effect for the available netmask.\n   *\n   * @return {AvailableNetmaskRules} rules currently in effect\n   */\n  getAvailableNetmaskRules() {\n    return this.availableNetmaskRules;\n  }\n\n  /**\n   * Returns the rules currently in effect for the pod netmask.\n   *\n   * @return {PodNetmaskRules} rules currently in effect\n   */\n  getPodRules() {\n    return this.podRules;\n  }\n}\n\nexport default InputRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport {Form, FormGroup, Input, Label, Col} from 'reactstrap';\nimport TextDropdown from '../../components/TextDropdown';\nimport NetmaskInput from '../../components/NetmaskInput';\nimport TextDropdownInput from '../../components/TextDropdownInput';\nimport InputRules from '../../rules/input/InputRules';\nimport PropTypes from 'prop-types';\n\nconst locationTypeOptions = [\n  {value: 'ZONAL', text: 'Zonal'},\n  {value: 'MULTI_ZONAL', text: 'Multi - zonal'},\n  {value: 'REGIONAL', text: 'Regional'},\n];\n\nconst extraZoneOptions = [\n  {value: '1', text: '1'},\n  {value: '2', text: '2'},\n  {value: '3', text: '3'},\n];\n\nconst masterBlockOptions = [\n  {value: 'PUBLIC', text: 'Public Master'},\n  {value: 'SHARE', text: 'Share one Master CIDR across all clusters'},\n  {value: 'UNIQUE', text: 'Create a Unique Master CIDR for each cluster'},\n  {value: 'DEFAULT', text: 'Use default values for the Master CIDR block'},\n];\n\nconst nodePodNetmaskOptions = [\n  {value: '28', text: '8 pods (/28)', max: 8},\n  {value: '27', text: '9 to 16 pods (/27)', max: 16},\n  {value: '26', text: '17 to 32 pods (/26)', max: 32},\n  {value: '25', text: '33 to 64 pods (/25)', max: 64},\n  {value: '24', text: '65 to 110 pods (/24)', max: 110},\n];\n\n/**\n * User inputted parameters\n */\nclass Parameters extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChangeNetwork = this.handleChangeNetwork.bind(this);\n\n    this.handleLocationTypeChange = this.handleLocationTypeChange.bind(this);\n    this.handleExtraZonesChange = this.handleExtraZonesChange.bind(this);\n    this.handlePropChange = this.handlePropChange.bind(this);\n  }\n\n\n  /**\n   * Handle selecting a different location type.\n   *\n   * @param {Object} newValue the new value.\n   */\n  handleLocationTypeChange(newValue) {\n    this.props.handleUpdateInput(\n        Object.assign({}, this.props.input, {\n          locationType: newValue,\n        }),\n    );\n  }\n\n\n  /**\n   * Handle selecting a different number of extra zones (used for zonal clusters only).\n   *\n   * @param {Object} newValue the new value.\n   */\n  handleExtraZonesChange(newValue) {\n    this.props.handleUpdateInput(\n        Object.assign({}, this.props.input, {\n          extraZones: newValue,\n        }),\n    );\n  }\n\n\n  /**\n   * Handle changing the network.\n   *\n   * @param {Object} e the change event.\n   */\n  handleChangeNetwork(e) {\n    this.props.handleUpdateInput(\n        Object.assign({}, this.props.input, {\n          network: e.target.value,\n        }),\n    );\n  }\n\n  /**\n   * Handle changing an arbitrary property.\n   *\n   * @param {string} propName the name of the property to update.\n   * @param {Object} newValue the new value.\n   */\n  handlePropChange(propName, newValue) {\n    this.props.handleUpdateInput(\n        Object.assign({}, this.props.input, {\n          [propName]: newValue,\n        }),\n    );\n  }\n\n  /**\n   * Render the widgets for the parameters.\n   *\n   * @return {Object} the Form element that contains the parameters.\n   */\n  render() {\n    let extraZonesLabel;\n    let extraZonesInput;\n\n    if (this.props.input.locationType === 'MULTI_ZONAL') {\n      extraZonesLabel = (\n        <Label for=\"extra-zones-select\" sm={2}>\n          Extra Zones\n        </Label>\n      );\n      extraZonesInput = (\n        <Col sm={1}>\n          <TextDropdown\n            name=\"extra-zones-select\"\n            id=\"extra-zones-select\"\n            options={extraZoneOptions}\n            value={this.props.input.extraZones}\n            changeHandler={this.handleExtraZonesChange}\n          />\n        </Col>\n      );\n    } else {\n      extraZonesLabel = ' ';\n      extraZonesInput = ' ';\n    }\n\n    return (\n      <Form>\n        <FormGroup row>\n          <Label for=\"location-type-select\" sm={3}>\n            Location Type\n          </Label>\n          <Col sm={2}>\n            <TextDropdown\n              name=\"location-type-select\"\n              id=\"location-type-select\"\n              options={locationTypeOptions}\n              value={this.props.input.locationType}\n              changeHandler={this.handleLocationTypeChange}\n            />\n          </Col>\n          {extraZonesLabel}\n          {extraZonesInput}\n        </FormGroup>\n\n        <FormGroup row>\n          <Label for=\"network\" sm={3}>\n            {' '}\n            Available Network{' '}\n          </Label>{' '}\n          <Col sm={2}>\n            <Input\n              name=\"network\"\n              id=\"network\"\n              type=\"text\"\n              placeholder=\"10.0.0.0\"\n              value={this.props.input.network}\n              onChange={this.handleChangeNetwork}\n            />{' '}\n          </Col>{' '}\n        </FormGroup>\n\n        <NetmaskInput\n          name=\"available-netmask\"\n          label=\"Available Netmask\"\n          rules={this.props.inputRules.getAvailableNetmaskRules()}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.netmask}\n          propName=\"netmask\"\n        />\n\n        <NetmaskInput\n          name=\"node-netmask\"\n          label=\"Node Subnet mask\"\n          rules={this.props.inputRules.getNodeRules()}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.nodeNetmask}\n          propName=\"nodeNetmask\"\n        />\n\n        <NetmaskInput\n          name=\"cluster-netmask\"\n          label=\"Cluster Subnet mask\"\n          rules={this.props.inputRules.getClusterRules()}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.clusterNetmask}\n          propName=\"clusterNetmask\"\n        />\n\n        <TextDropdownInput\n          name=\"node-pod-netmask-select\"\n          label=\"Maximum Pods (Pod Netmask)\"\n          options={nodePodNetmaskOptions}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.nodePodNetmask}\n          propName=\"nodePodNetmask\"\n        />\n\n        <NetmaskInput\n          name=\"service-netmask\"\n          label=\"Service Subnet mask\"\n          rules={this.props.inputRules.getServiceRules()}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.serviceNetmask}\n          propName=\"serviceNetmask\"\n        />\n\n        <TextDropdownInput\n          name=\"master-block-select\"\n          label=\"Master CIDR block\"\n          options={masterBlockOptions}\n          changeHandler={this.handlePropChange}\n          value={this.props.input.masterNetwork}\n          propName=\"masterNetwork\"\n        />\n      </Form>\n    );\n  }\n}\n\nParameters.propTypes = {\n  input: PropTypes.object,\n  inputRules: PropTypes.instanceOf(InputRules),\n  handleUpdateInput: PropTypes.func,\n};\n\nexport default Parameters;\n\nexport {nodePodNetmaskOptions};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities to manipulate IPs.\n */\nclass IPUtils {\n  /**\n   * Converts an IP address from decimal to dot notation.\n   *\n   * @param {number} address address in decimal notation.\n   * @return {string} address in dot notation.\n   */\n  static decToDot(address) {\n    const part1 = address & 255;\n    const part2 = (address >> 8) & 255;\n    const part3 = (address >> 16) & 255;\n    const part4 = (address >> 24) & 255;\n    return part4 + '.' + part3 + '.' + part2 + '.' + part1;\n  }\n\n  /**\n   * Converts an IP address from dot to decimal notation.\n   *\n   * @param {string} address address in dot notation.\n   * @return {number} address in decimal notation.\n   */\n  static dotToDec(address) {\n    const octets = address.match(/(\\d+)/g);\n    let total = 0;\n    for (const i in octets) {\n      if (Object.prototype.hasOwnProperty.call(octets, i)) {\n        const mul = 2 ** ((3 - i) * 8);\n        total += octets[i] * mul;\n      }\n    }\n    return total;\n  }\n\n  /**\n   * Calculate the last IP of a network with a particular netmask.\n   * @param {number} networkIp network IP.\n   * @param {number} netmask netwask for the network.\n   * @return {number} last IP of the network.\n   */\n  static netEnd(networkIp, netmask) {\n    // Logical OR between the address and the NOT netmask (bits flipped).\n    const netmaskDec = 2 ** (32 - netmask) - 1;\n    return this.fixSigned(networkIp | netmaskDec);\n  }\n\n  /**\n   * Calculate the first IP of a network with a particular netmask.\n   * @param {number} networkIp network IP.\n   * @param {number} netmask netwask for the network.\n   * @return {number} first IP of the network.\n   */\n  static netStart(networkIp, netmask) {\n    // Logical AND between the address and the netmask.\n    const netmaskDec = 4294967295 - (2 ** (32 - netmask) - 1);\n    return this.fixSigned(networkIp & netmaskDec);\n  }\n\n  /**\n * Find the largest viable netmask between to IPs.\n *\n * @param {number} currentIp start IP.\n * @param {number} endIp end IP.\n * @return {number} the largest mask between the start and end IPs.\n */\n  static findLargestMask(currentIp, endIp) {\n    const remaining = endIp - currentIp;\n    let currentBits = 0;\n    while (currentBits < 32) {\n      const ips = 2**currentBits;\n      if (remaining <= ips) {\n        return 32 - currentBits;\n      }\n      currentBits ++;\n    }\n    return NaN; // ???\n  }\n\n  /**\n   * Converts a netmask into a decimal value (bits turned on).\n   *\n   * @param {number} netmask netmask value (from 0 to 32)\n   * @return {number} decimal value of netmask in decimal format\n   */\n  static netmaskToDecimal(netmask) {\n    const v1 = 4294967295; // (2 ** 32) - 1\n    const v2 = 2 ** (32 - netmask) - 1;\n    return this.fixSigned(v1 ^ v2);\n  }\n\n  /**\n   * Deals with the fact that in JS bitwise operations\n   * 32 bit SIGNED numbers are used, so there's a possible overflow.\n   *\n   * @param {number} signed number in SIGNED format.\n   * @return {number} unsigned number\n   */\n  static fixSigned(signed) {\n    if (signed < 0) {\n      let ret = signed & 2147483647;\n      ret += 2147483648;\n      return ret;\n    }\n    return signed;\n  }\n\n  /**\n   * Calculates the number of usable IPs.\n   *\n   * @param {number} netmask network netmask.\n   * @return {number} number of usable IPs.\n   */\n  static netmaskToUsableIps(netmask) {\n    return 2 ** (32 - netmask);\n  }\n}\n\nexport default IPUtils;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport IPUtils from './IPUtils';\n\n/**\n * Pack subnets as efficient as possible withtin a given address space\n */\nclass Packer {\n  /**\n   * Packs the provided subnets into the provided space.\n   * If packing the subnets is not possible, it returns an object with 'state': 'bad'\n   *\n   * @param {*} space\n   * @param {*} subnets\n   * @return {Object} object with the packed subnets.\n   */\n  pack(space, subnets) {\n    const sortedSubnets = this.sortSubnets(subnets);\n    let currentIp = IPUtils.netStart(IPUtils.dotToDec(space.net), space.mask);\n\n    const endIp = IPUtils.netEnd(currentIp, space.mask);\n    const packedNets = [];\n    for (let i = 0; i < sortedSubnets.length; i++) {\n      const subnet = sortedSubnets[i];\n      const fit = this.fit(currentIp, endIp, subnet);\n      if (fit.fit) {\n        packedNets.push({\n          name: subnet.name,\n          mask: subnet.mask,\n          netStart: currentIp,\n          netEnd: fit.end,\n          description: subnet.description,\n          vpcName: subnet.vpcName,\n          subnetRangeName: subnet.subnetRangeName,\n          type: subnet.type,\n        });\n        currentIp = fit.end + 1;\n      } else {\n        // Couldn't fit\n        return {\n          state: 'bad',\n        };\n      }\n    }\n\n    const freeRanges=this.findEmptyRanges(space, currentIp);\n    return {\n      state: 'ok',\n      packedNets: packedNets,\n      freeRanges: freeRanges,\n    };\n  }\n\n  /**\n   * Tries to fit a subnet between spaceStart and spaceEnd\n   * @param {number} spaceStart\n   * @param {number} spaceEnd\n   * @param {number} currentNet\n   * @return {Object} object with the result\n   */\n  fit(spaceStart, spaceEnd, currentNet) {\n    const currentNetEnd = IPUtils.netEnd(spaceStart, currentNet.mask);\n    if (currentNetEnd > spaceEnd) {\n      return {\n        fit: false,\n        end: currentNetEnd,\n      };\n    }\n    return {\n      fit: true,\n      end: currentNetEnd,\n    };\n  }\n\n  /**\n   * Sorts the subnets from largest to smallest.\n   * @param {Array} subnets Subnets to sort.\n   * @return {Array} sorted subnets.\n   */\n  sortSubnets(subnets) {\n    return subnets.sort(function(a, b) {\n      if (a.mask === b.mask) {\n        return a.name < b.name ? -1 : a.name > b.name ? 1 : 0;\n      } else {\n        return a.mask - b.mask;\n      }\n    });\n  }\n\n  /**\n   * Finds the largest free CIDR blocks in a subnet, starting from a particular IP.\n   *\n   * @param {Object} space source address space.\n   * @param {number} firstFreeIpDec first free IP.\n   * @return {Array} sorted free subnet.\n   */\n  findEmptyRanges(space, firstFreeIpDec) {\n    const startIp = IPUtils.netStart(IPUtils.dotToDec(space.net), space.mask);\n    const endIp = IPUtils.netEnd(startIp, space.mask);\n    const maxIp = startIp + (endIp - firstFreeIpDec);\n    const freeNets = [];\n    let currentIp = startIp;\n    for (let mask = space.mask; mask < 32; mask ++ ) {\n      const subnet = {\n        mask: mask,\n      };\n      const fit = this.fit(currentIp, maxIp, subnet);\n      if (fit.fit) {\n        freeNets.unshift({\n          mask: mask,\n          netStart: endIp - fit.end +startIp,\n          netEnd: endIp - currentIp +startIp,\n        });\n        currentIp = fit.end + 1;\n      }\n    }\n    return freeNets;\n  }\n}\n\nexport default Packer;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport Packer from './Packer';\n\n/**\n * Object to encapsulate the business logic for doing IPAM for GKE clusters.\n */\nclass Logic {\n  /**\n   * Constructor.\n   *\n   * @param {*} input Input provided by the user.\n   */\n  constructor(input) {\n    // Calculate clusters, using Packer\n    const packer = new Packer();\n    const validCombinations = [];\n    const space = {\n      net: input.network,\n      mask: input.netmask,\n    };\n    let ok = true;\n    let count = 1;\n    while (ok && count < 1001) {\n      const networks = [];\n      const targetNumberLength = count.toString().length;\n      for (let j = 1; j <= count; j++) {\n        networks.push({\n          mask: input.nodeNetmask,\n          name: 'node-' + this.pad(targetNumberLength, j),\n          vpcName: 'vpc-' + this.pad(targetNumberLength, j),\n          subnetRangeName: 'N/A',\n          type: 'PRIMARY',\n          description:\n            'Main VPC range for node-' + this.pad(targetNumberLength, j),\n        });\n\n        networks.push({\n          mask: input.clusterNetmask,\n          name: 'cluster-' + this.pad(targetNumberLength, j),\n          vpcName: 'vpc-' + this.pad(targetNumberLength, j),\n          subnetRangeName: 'cluster-' + this.pad(targetNumberLength, j),\n          type: 'SECONDARY',\n          description:\n            'Secondary range for VPC node-' +\n            this.pad(targetNumberLength, j) +\n            ' (for pods)',\n        });\n\n        networks.push({\n          mask: input.serviceNetmask,\n          name: 'service-' + this.pad(targetNumberLength, j),\n          vpcName: 'vpc-' + this.pad(targetNumberLength, j),\n          subnetRangeName: 'service-' + this.pad(targetNumberLength, j),\n          type: 'SECONDARY',\n          description:\n            'Secondary range for VPC node-' +\n            this.pad(targetNumberLength, j) +\n            ' (for services)',\n        });\n\n        if (input.masterNetwork === 'UNIQUE') {\n          networks.push({\n            mask: 28,\n            name: 'master-' + this.pad(targetNumberLength, j),\n            vpcName: 'N/A',\n            subnetRangeName: 'N/A',\n            type: 'MANAGED',\n            description:\n              'IP range for managed VPC for master(s) for cluster node-' +\n              this.pad(targetNumberLength, j),\n          });\n        }\n      }\n\n      if (input.masterNetwork === 'SHARE') {\n        networks.push({\n          mask: 28,\n          name: 'master',\n          vpcName: 'N/A',\n          subnetRangeName: 'N/A',\n          type: 'MANAGED',\n          description:\n            'Shared IP range for managed VPC for master(s) for all clusters',\n        });\n      }\n\n      const packerResults = packer.pack(space, networks);\n      if (packerResults.state === 'ok') {\n        validCombinations.push({\n          networks: packerResults.packedNets,\n          freeRanges: packerResults.freeRanges,\n        });\n      } else {\n        ok = false;\n      }\n\n      count++;\n    }\n\n    this.combinations = validCombinations;\n  }\n\n  /**\n   * Pads the number to a target length using zeros.\n   *\n   * @param {number} targetLength number of digits to pad to.\n   * @param {string} numberToPad number to pad.\n   * @return {string} padded number.\n   */\n  pad(targetLength, numberToPad) {\n    return numberToPad.toString().padStart(targetLength, '0');\n  }\n\n  /**\n   * Returns the rules used for cluster netmask calculations.\n   *\n   * @return {*} the cluster rules.\n   */\n  getClusterRules() {\n    return this.clusterRules;\n  }\n\n  /**\n   * Returns the rules used for node netmask calculations.\n   *\n   * @return {*} the node rules.\n   */\n  getNodeRules() {\n    return this.nodeRules;\n  }\n\n  /**\n   * Returns the rules used for service netmask calculations.\n   *\n   * @return {*} the service rules.\n   */\n  getServiceRules() {\n    return this.serviceRules;\n  }\n\n  /**\n   * Returns the viable combinations.\n   *\n   * @return {*} the viable combinations.\n   */\n  getCombinations() {\n    return this.combinations;\n  }\n}\n\nexport default Logic;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport {Input, Label, FormGroup, Col} from 'reactstrap';\nimport Logic from '../../logic/Logic';\nimport PropTypes from 'prop-types';\n\n/**\n * Dropdown for the different combinations that were calculated\n */\nclass LogicOutputDropdown extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   *\n   * Create the options, one per combination\n   *\n   * @return {Object} the options for the dropdown.\n   */\n  createOptions = () => {\n    const combinations = this.props.logic.getCombinations();\n\n    const options = [];\n    combinations.forEach(function(element, index) {\n      options.push(\n          <option value={index} key={index}>Number of clusters: {index + 1} </option>,\n      );\n    });\n    return options;\n  };\n\n  /**\n   * Handle selecting a different combination.\n   *\n   * @param {Object} e the selection event.\n   */\n  handleChange(e) {\n    this.props.changeHandler(Number(e.target.value));\n  }\n\n  /**\n   * Render the dropdown.\n   *\n   * @return {Object} the dropdown for the combinations that were calculated.\n   */\n  render() {\n    return (\n      <div>\n        <FormGroup row>\n          <Label for=\"combination\" sm={2}>\n            {' '}\n            Available Combinations{' '}\n          </Label>\n          <Col sm={2}>\n            <Input\n              type=\"select\"\n              name=\"combination\"\n              id=\"exampleSelect\"\n              onChange={this.handleChange}\n            >\n              {' '}\n              {this.createOptions()}{' '}\n            </Input>{' '}\n          </Col>{' '}\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nLogicOutputDropdown.propTypes = {\n  logic: PropTypes.instanceOf(Logic),\n  input: PropTypes.object,\n  changeHandler: PropTypes.func,\n};\n\nexport default LogicOutputDropdown;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport IPUtils from '../../logic/IPUtils';\nimport PropTypes from 'prop-types';\n\n/**\n * A row for a particular subnet definition\n */\nclass LogicOutputNetworkRow extends Component {\n  /**\n   * Pretty format the subnet type.\n   * @param {type} type The subnet type.\n   * @return {string} subnet type text.\n   */\n  subnetTypeText(type) {\n    if (type === 'PRIMARY') {\n      return 'Primary';\n    } else if (type === 'SECONDARY') {\n      return 'Secondary';\n    } else if (type === 'MANAGED') {\n      return 'Google Managed';\n    }\n    return 'N/A';\n  }\n\n  /**\n   * Render the row.\n   *\n   * @return {Object} the table row for the network.\n   */\n  render() {\n    return (\n      <tr>\n        <td>\n          {' '}\n          {IPUtils.decToDot(this.props.network.netStart)}/\n          {this.props.network.mask}\n        </td>\n        <td> {IPUtils.decToDot(this.props.network.netStart)} </td>\n        <td> {IPUtils.decToDot(this.props.network.netEnd)} </td>\n        <td> {this.props.network.name} </td>\n        <td> {this.props.network.vpcName} </td>\n        <td> {this.props.network.subnetRangeName} </td>\n        <td> {this.subnetTypeText(this.props.network.type)} </td>\n        <td> {this.props.network.description} </td>\n      </tr>\n    );\n  }\n}\n\nLogicOutputNetworkRow.propTypes = {\n  network: PropTypes.object,\n};\n\nexport default LogicOutputNetworkRow;\n","// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport IPUtils from '../../logic/IPUtils';\nimport PropTypes from 'prop-types';\n\n/**\n * A row for an available or free subnet.\n */\nclass LogicOutputFreeNetworkRow extends Component {\n  /**\n   * Render the row.\n   *\n   * @return {Object} the table row for the network.\n   */\n  render() {\n    return (\n      <tr>\n        <td>\n          {' '}\n          {IPUtils.decToDot(this.props.network.netStart)}/\n          {this.props.network.mask}\n        </td>\n        <td> {IPUtils.decToDot(this.props.network.netStart)} </td>\n        <td> {IPUtils.decToDot(this.props.network.netEnd)} </td>\n        <td> /{this.props.network.mask} </td>\n      </tr>\n    );\n  }\n}\n\nLogicOutputFreeNetworkRow.propTypes = {\n  network: PropTypes.object,\n};\n\nexport default LogicOutputFreeNetworkRow;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport IPUtils from '../../logic/IPUtils';\n\n/**\n * Rules for the main subnet range based on the subnet size\n */\nclass NodeNetworkRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input User input.\n   */\n  constructor(input) {\n    this.input = input;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    const netmask = this.input.nodeNetmask;\n    // TODO allow reserving IPs on the Node Network\n    return IPUtils.netmaskToUsableIps(netmask) - 4; // GCP reserves 4 ips.\n  }\n\n  /**\n   * Returns the reference documentation URLs.\n   *\n   * @return {Array} an Array with a list of URLs.\n   */\n  ref() {\n    return [\n      'https://cloud.google.com/vpc/docs/vpc#reserved_ip_addresses_in_every_subnet',\n    ];\n  }\n}\n\n/**\n * Rules for the main subnet range based on the cluster subnet size size\n */\nclass ClusterNetworkRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input User input.\n   */\n  constructor(input) {\n    this.input = input;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    const clusterNetmaskIps = IPUtils.netmaskToUsableIps(\n        this.input.clusterNetmask,\n    );\n    const podNetmaskIps = IPUtils.netmaskToUsableIps(this.input.nodePodNetmask);\n    return clusterNetmaskIps / podNetmaskIps;\n  }\n\n  /**\n   * Returns the reference documentation URLs.\n   *\n   * @return {Array} an Array with a list of URLs.\n   */\n  ref() {\n    return [];\n  }\n}\n\n/**\n * Rules for the main subnet range based on location type (Regional, zonal, multi-zonal).\n */\nclass RegionalLocationRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input User input.\n   * @param {number} currentMax Current possible maximum based on upstream rules.\n   */\n  constructor(input, currentMax) {\n    this.input = input;\n    this.currentMax = currentMax;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    if (this.input.locationType === 'REGIONAL') {\n      return this.currentMax - (this.currentMax % 3);\n    } else if (this.input.locationType === 'MULTI_ZONAL') {\n      return (\n        this.currentMax -\n        (this.currentMax % (Number.parseInt(this.input.extraZones) + 1))\n      );\n    }\n    return this.currentMax;\n  }\n\n  /**\n   * Returns the reference documentation URLs.\n   *\n   * @return {Array} an Array with a list of URLs.\n   */\n  ref() {\n    return [];\n  }\n}\n\n/**\n * Rules for the main subnet range based on the aggregate of NodeNetworkRules and ClusterNetworkRules\n */\nclass NodeOutputRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input User input.\n   */\n  constructor(input) {\n    this.input = input;\n    this.nodeNetworkRules = new NodeNetworkRules(this.input);\n    this.clusterNetworkRules = new ClusterNetworkRules(this.input);\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    const v1 = this.nodeNetworkRules.maximum();\n    const v2 = this.clusterNetworkRules.maximum();\n\n    const regionalLocationRules = new RegionalLocationRules(\n        this.input,\n      v1 < v2 ? v1 : v2,\n    );\n\n    return regionalLocationRules.maximum();\n  }\n\n  /**\n   * @return{Array} list of details that are affecting the maximum size.\n   */\n  details() {\n    const details = [];\n    details.push({\n      id: 'subnet_limit',\n      text: `The node subnet will limit each cluster to a maximum of ${this.nodeNetworkRules.maximum()} node(s).`,\n    });\n    details.push({\n      id: 'cluster_limit',\n      text: `The cluster subnet will limit each cluster to a maximum of ${this.clusterNetworkRules.maximum()} node(s).`,\n    });\n    if (this.input.locationType === 'REGIONAL') {\n      details.push({\n        id: 'regional_multiple_limit',\n        text: `Nodes in a regional cluster have to be deployed in multiples of three`,\n      });\n    } else if (this.input.locationType === 'MULTI_ZONAL') {\n      details.push({\n        id: 'zonal_multiple_limit',\n        text: `Nodes in a multi-zonal cluster (with ${\n          this.input.extraZones\n        } extra zone) have to be deployed in multiples of ${Number.parseInt(\n            this.input.extraZones,\n        ) + 1}`,\n      });\n    }\n\n    return details;\n  }\n}\n\nexport default NodeOutputRules;\n\nexport {NodeNetworkRules, ClusterNetworkRules};\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport IPUtils from '../../logic/IPUtils';\n\n/**\n * Rules for the Service subnet range\n */\nclass ServiceOutputRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input\n   */\n  constructor(input) {\n    this.input = input;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    const serviceIps = IPUtils.netmaskToUsableIps(this.input.serviceNetmask);\n    return serviceIps;\n  }\n}\n\nexport default ServiceOutputRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {nodePodNetmaskOptions} from '../../ui/input/Parameters';\n\n/**\n * Rules for the Pod subnet range\n */\nclass PodOutputRules {\n  /**\n   * Constructor.\n   *\n   * @param {Input} input\n   */\n  constructor(input) {\n    this.input = input;\n  }\n\n  /**\n   * Returns the maximum number of usable IPs.\n   *\n   * @return {number} maximum number of usable IPs.\n   */\n  maximum() {\n    let i;\n    for (i = 0; i < nodePodNetmaskOptions.length; ++i) {\n      if (nodePodNetmaskOptions[i].value === this.input.nodePodNetmask) {\n        return nodePodNetmaskOptions[i].max;\n      }\n    }\n    return NaN;\n  }\n}\n\nexport default PodOutputRules;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport LogicOutputDropdown from './LogicOutputDropdown';\nimport LogicOutputNetworkRow from './LogicOutputNetworkRow';\nimport LogicOutputFreeNetworkRow from './LogicOutputFreeNetworkRow';\nimport {Table} from 'reactstrap';\nimport NodeOutputRules from '../../rules/output/NodeOutputRules';\nimport ServiceOutputRules from '../../rules/output/ServiceOutpuRules';\nimport PodOutputRules from '../../rules/output/PodOutputRules';\nimport Logic from '../../logic/Logic';\nimport PropTypes from 'prop-types';\n\n/**\n * Container object for outputting the results of the calculation logic.\n */\nclass LogicOutput extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    const output = {\n      combinationIndex: 0,\n    };\n\n    this.state = {\n      output: output,\n    };\n\n    this.handleUpdateOutput = this.handleUpdateOutput.bind(this);\n    this.handleChangeCombination = this.handleChangeCombination.bind(this);\n  }\n  /**\n   *\n   * Create the detail.\n   *\n   * @param {Object} nodeOutputRules rules that were used to compute the output.\n   * @return {Object} the details for the rules.\n   */\n  createDetail = (nodeOutputRules) => {\n    const details = [];\n\n    const nodeDetails = nodeOutputRules.details();\n    nodeDetails.forEach((detail) => {\n      details.push(<div key={detail.id}>{detail.text}</div>);\n    });\n\n    return details;\n  };\n\n  /**\n   *\n   * Create the rows.\n   *\n   * @return {Object} the details rows.\n   */\n  createRows = () => {\n    const logic = this.props.logic;\n    const combination = logic.getCombinations()[\n        this.state.output.combinationIndex\n    ];\n    const networks = combination.networks;\n    const rows = [];\n\n    networks.forEach((network) => {\n      rows.push(<LogicOutputNetworkRow key={network.name} network={network} />);\n    });\n\n    return rows;\n  };\n\n  /**\n   *\n   * Create the rows representing the available or free CIDR ranges.\n   *\n   * @return {Object} the details rows.\n   */\n  createFreeRows = () => {\n    const logic = this.props.logic;\n    const combination = logic.getCombinations()[\n        this.state.output.combinationIndex\n    ];\n    const freeRanges = combination.freeRanges;\n    const rows = [];\n\n    freeRanges.forEach((freeRange) => {\n      rows.push(<LogicOutputFreeNetworkRow key={freeRange.netStart} network={freeRange} />);\n    });\n\n    return rows;\n  };\n\n\n  /**\n   *\n   * Create the detail tables.\n   *\n   * @return {Object} the detail tables.\n   */\n  createTables = () => {\n    const logic = this.props.logic;\n    if (logic.getCombinations().length<this.state.output.combinationIndex) {\n      return (<div><h3> Invalid Combination Selected </h3></div>);\n    }\n\n    return (<div><h3> VPCs and Subnets required </h3>\n      <Table>\n        <tbody>\n          <tr>\n            <th> Network </th>\n            <th> Start </th>\n            <th> End </th>\n            <th> Name </th>\n            <th> VPC Name </th>\n            <th> Subnet Range Name </th>\n            <th> Subnet Range Type </th>\n            <th> Description </th>\n          </tr>\n          {this.createRows()}\n        </tbody>\n      </Table>{' '}\n      <h3> Free Subnets </h3>\n      <Table>\n        <tbody>\n          <tr>\n            <th> Network </th>\n            <th> Start </th>\n            <th> End </th>\n            <th> Netmask </th>\n          </tr>\n          {this.createFreeRows()}\n        </tbody>\n      </Table>\n    </div>);\n  }\n\n  /**\n   * Handle the selection of a different combination to be displayed.\n   *\n   * @param {number} combinationIndex The index of the combinations to be displayed.\n   */\n  handleChangeCombination(combinationIndex) {\n    this.handleUpdateOutput(\n        Object.assign({}, this.state.output, {\n          combinationIndex: combinationIndex,\n        }),\n    );\n  }\n\n  /**\n   * Update the output.\n   *\n   * @param {object} output The updated output.\n   */\n  handleUpdateOutput(output) {\n    this.setState({\n      output: output,\n    });\n  }\n\n  /**\n   * Render the main output component.\n   *\n   * @return {Object} the main <div> for the output.\n   */\n  render() {\n    const nodeOutputRules = new NodeOutputRules(this.props.input);\n    const serviceOutputRules = new ServiceOutputRules(this.props.input);\n    const podOutputRules = new PodOutputRules(this.props.input);\n\n    return (\n      <div>\n        <div>\n          <b> Summary </b> <br />\n          With the current configuration, up to{' '}\n          {this.props.logic.getCombinations().length} isolated clusters can be\n          created. <br />\n          Each cluster will suppport: <br />\n          Up to {nodeOutputRules.maximum()} node(s) per cluster. <br />\n          Up to {serviceOutputRules.maximum()} service(s) per cluster. <br />\n          Up to {podOutputRules.maximum()} pods per node. <br />\n        </div>\n        <div>\n          <b>Details</b>\n          <br />\n          {this.createDetail(nodeOutputRules)}\n        </div>\n        <LogicOutputDropdown\n          logic={this.props.logic}\n          changeHandler={this.handleChangeCombination}\n        />{' '}\n        {this.createTables()}\n      </div>\n    );\n  }\n}\n\n\nLogicOutput.propTypes = {\n  logic: PropTypes.instanceOf(Logic),\n  input: PropTypes.object,\n};\n\nexport default LogicOutput;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport '../../App.css';\nimport LogicOutput from './LogicOutput';\nimport PropTypes from 'prop-types';\n\n\n/**\n * Class for the results of the calculations\n */\nclass Results extends Component {\n  /**\n   * Render the actual results.\n   *\n   * @return {Object} the results or error message.\n   */\n  printReslts() {\n    if (\n      this.props.state.logic &&\n      this.props.state.logic.getCombinations() &&\n      this.props.state.logic.getCombinations().length > 0\n    ) {\n      return (\n        <LogicOutput\n          logic={this.props.state.logic}\n          input={this.props.state.input}\n        />\n      );\n    } else {\n      return <div> Invalid Input </div>;\n    }\n  }\n\n\n  /**\n   * Render the results component.\n   *\n   * @return {Object} the main <div> for the results.\n   */\n  render() {\n    return (\n      <div>\n        <hr/>\n        <h2> Results </h2>\n        {this.printReslts()}\n      </div>\n    );\n  }\n}\n\nResults.propTypes = {\n  state: PropTypes.object,\n};\n\nexport default Results;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Col,\n  Input,\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\n\n/**\n * Component to hold buttons to manage the state of applications.\n */\nclass StateButtons extends React.Component {\n  /**\n   * Constructor.\n   *\n   * @param {Object} props\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      downloadModal: false,\n      uploadModal: false,\n      configText: '',\n    };\n\n    this.toggleDownload = this.toggleDownload.bind(this);\n    this.toggleUpload = this.toggleUpload.bind(this);\n    this.uploadConfig = this.uploadConfig.bind(this);\n    this.handleConfigText = this.handleConfigText.bind(this);\n  }\n\n  /**\n   * Handle ingesting new text for the configuration.\n   *\n   * @param {Object} e the selection event.\n   */\n  handleConfigText(e) {\n    this.setState(\n        Object.assign({}, this.state.input, {\n          configText: e.target.value,\n        }),\n    );\n  }\n\n  /**\n   * Show the download modal dialog\n   */\n  toggleDownload() {\n    this.setState((prevState) => ({\n      downloadModal: !prevState.downloadModal,\n      uploadModal: prevState.uploadModal,\n      configText: '',\n    }));\n  }\n\n  /**\n   * Show the upload modal dialog\n   */\n  toggleUpload() {\n    this.setState((prevState) => ({\n      downloadModal: prevState.downloadModal,\n      uploadModal: !prevState.uploadModal,\n      configText: '',\n    }));\n  }\n\n  /**\n   * Hide the upload modal dialog, and ingest the config text.\n   */\n  uploadConfig() {\n    this.toggleUpload();\n    this.props.handleUploadConfig(this.state.configText);\n  }\n\n  /**\n   * Render the Col element.\n   *\n   * @return {Object} the Col element that contains the buttons.\n   */\n  render() {\n    return (\n      <Col className=\"text-right \">\n        <Button color=\"primary\" onClick={this.toggleDownload}>\n          Download Config\n        </Button>{' '}\n        <Modal isOpen={this.state.downloadModal} toggle={this.toggleDownload}>\n          <ModalHeader toggle={this.toggleDownload}>\n            Current Configuration\n          </ModalHeader>\n          <ModalBody>\n            <pre>{this.props.input}</pre>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={this.toggleDownload}>\n              Close\n            </Button>\n          </ModalFooter>\n        </Modal>\n        <Button color=\"secondary\" onClick={this.toggleUpload}>\n          Upload Config\n        </Button>{' '}\n        <Modal isOpen={this.state.uploadModal} toggle={this.toggleUpload}>\n          <ModalHeader toggle={this.toggleUpload}>\n            Upload Configuration\n          </ModalHeader>\n          <ModalBody>\n            <Input\n              type=\"textarea\"\n              name=\"text\"\n              id=\"exampleText\"\n              rows=\"15\"\n              onChange={this.handleConfigText}\n            />\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.uploadConfig}>\n              Upload\n            </Button>\n            <Button color=\"secondary\" onClick={this.toggleUpload}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </Col>\n    );\n  }\n}\n\nStateButtons.propTypes = {\n  input: PropTypes.string,\n  handleUploadConfig: PropTypes.func,\n};\n\nexport default StateButtons;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {Component} from 'react';\nimport './App.css';\nimport {Container, Row} from 'reactstrap';\n\nimport Parameters from './ui/input/Parameters';\nimport Results from './ui/output/Results';\nimport Logic from './logic/Logic';\n\nimport InputRules from './rules/input/InputRules';\nimport StateButtons from './components/StateButtons';\n\n/**\n * Main component for the UI. It's the glue logic between the input, business logic, and output.\n */\nclass Calculator extends Component {\n  /**\n   * Constructor.\n   *\n   * @param {*} props Properties.\n   */\n  constructor(props) {\n    super(props);\n\n    // TODO Need to use better defaults\n    const input = {\n      network: '10.0.0.0',\n      netmask: 16,\n      nodeNetmask: 29,\n      clusterNetmask: 24,\n      serviceNetmask: 24,\n      nodePodNetmask: '24',\n      masterNetwork: 'PUBLIC',\n      locationType: 'ZONAL',\n      extraZones: 1,\n    };\n    const logic = new Logic(input);\n    const inputRules = new InputRules(input);\n\n    this.state = {\n      input: input,\n      logic: logic,\n      inputRules: inputRules,\n    };\n\n    this.handleUpdateInput = this.handleUpdateInput.bind(this);\n\n    this.handleUploadConfig = this.handleUploadConfig.bind(this);\n  }\n\n  /**\n   * Handle uploading a complete new config text.\n   *\n   * @param {string} configText the new config text.\n   */\n  handleUploadConfig(configText) {\n    const newInput = JSON.parse(configText);\n    this.handleUpdateInput(newInput);\n  }\n\n  /**\n   * Handle updating the input from the UI.\n   *\n   * @param {Object} input the new input.\n   */\n  handleUpdateInput(input) {\n    let logic;\n    if (this.validateInput(input)) {\n      logic = new Logic(input);\n    }\n    this.setState({\n      input: input,\n      logic: logic,\n    });\n  }\n\n  /**\n   * Validates that the input is valid.\n   *\n   * @param {Object} input Input structure.\n   * @return {boolean} True if valid, false otherwise.\n   */\n  validateInput(input) {\n    if (!Number.isInteger(input.netmask)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Render the div element that holds most of the application.\n   *\n   * @return {Object} the div element with the application.\n   */\n  render() {\n    return (\n      <div className=\"workspace\">\n        <br />\n        <Container>\n          <Row>\n            <StateButtons\n              input={JSON.stringify(this.state.input, null, ' ')}\n              handleUploadConfig={this.handleUploadConfig}\n            />\n          </Row>\n        </Container>\n        <br />\n        <Parameters\n          input={this.state.input}\n          inputRules={this.state.inputRules}\n          handleUpdateInput={this.handleUpdateInput}\n        />\n\n        <hr />\n        <h2>Input</h2>\n        <pre>{JSON.stringify(this.state.input, null, ' ')}</pre>\n\n        <Results state={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React, {\n  Component,\n} from 'react';\nimport './App.css';\nimport Calculator from './Calculator';\n\n/**\n * Main application class.\n */\nclass App extends Component {\n  /**\n   * Render the main application component.\n   *\n   * @return {Object} the main <div> for the application.\n   */\n  render() {\n    return ( <div className = \"App\" >\n      <header className = \"App-header\" >\n        <h1 > GKE IP Address Management </h1>\n      </header>\n\n      <Calculator / >\n\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* eslint no-console: [\"off\"], require-jsdoc: [\"off\"] */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render( < App / >, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}